
export type Question = {
  id: number;
  question: string;
  type: 'mcq' | 'subjective';
  options?: string[];
  answer: string;
  explanation?: string;
  testId: number;
  difficulty: 'easy' | 'medium' | 'hard' | 'expert';
};

export const questions: Record<string, Question[]> = {
  frontend: [
    // Test 1: 5 Questions (3 MCQ, 2 Subjective)
    { id: 1, testId: 1, difficulty: 'easy', question: "What does HTML stand for?", type: 'mcq', options: ['HyperText Markup Language', 'High-Level Text Machine Language', 'Hyper-Transferable Markup Language', 'Home Tool Markup Language'], answer: 'HyperText Markup Language', explanation: 'HTML is the standard markup language for documents designed to be displayed in a web browser.' },
    { id: 2, testId: 1, difficulty: 'easy', question: "What is the correct CSS syntax for making all the <p> elements bold?", type: 'mcq', options: ['p {font-weight: bold;}', 'p {text-style: bold;}', '<p style="font-weight:bold;">', 'p {font-style: bold;}'], answer: 'p {font-weight: bold;}', explanation: 'The `font-weight` property is used to specify the weight or boldness of a font.' },
    { id: 3, testId: 1, difficulty: 'easy', question: "Which JavaScript keyword is used to declare a variable that cannot be reassigned?", type: 'mcq', options: ['const', 'let', 'var', 'static'], answer: 'const', explanation: '`const` declares a block-scoped variable, but its value cannot be reassigned.' },
    { id: 4, testId: 1, difficulty: 'easy', question: "What is the purpose of the `alt` attribute on an `<img>` tag?", type: 'subjective', answer: "The `alt` attribute provides alternative text for an image if it cannot be displayed. It's crucial for accessibility, allowing screen readers to describe the image to visually impaired users, and is also used by search engines for SEO.", explanation: "Good `alt` text is important for SEO and accessibility." },
    { id: 5, testId: 1, difficulty: 'easy', question: "What is the Box Model in CSS?", type: 'subjective', answer: "The CSS box model is a box that wraps around every HTML element. It consists of: content, padding, border, and margin. It defines how elements are sized and spaced on a web page.", explanation: "It's a foundational concept for layout and spacing on the web." },
    // Test 2: 10 Questions (6 MCQ, 4 Subjective)
    { id: 6, testId: 2, difficulty: 'easy', question: "Which HTML tag is used to define an internal style sheet?", type: 'mcq', options: ['<script>', '<css>', '<style>', '<link>'], answer: '<style>', explanation: 'The `<style>` tag is used to embed CSS directly within an HTML document.' },
    { id: 7, testId: 2, difficulty: 'easy', question: "How do you select an element with id 'demo' in CSS?", type: 'mcq', options: ['.demo', '#demo', 'demo', '*demo'], answer: '#demo', explanation: "The '#' symbol is used in CSS to select elements by their ID." },
    { id: 8, testId: 2, difficulty: 'easy', question: "Which of these is NOT a valid JavaScript data type?", type: 'mcq', options: ['string', 'boolean', 'character', 'undefined'], answer: 'character', explanation: "JavaScript does not have a separate 'character' type. Single characters are handled as strings." },
    { id: 9, testId: 2, difficulty: 'medium', question: "In the context of Flexbox, what does `justify-content` control?", type: 'mcq', options: ['Alignment along the cross axis', 'Alignment along the main axis', 'The spacing between flex lines', 'The size of the flex items'], answer: 'Alignment along the main axis', explanation: '`justify-content` defines how the browser distributes space between and around content items along the main-axis of a flex container.' },
    { id: 10, testId: 2, difficulty: 'medium', question: "Which of the following is a hook in React?", type: 'mcq', options: ['render()', 'useState()', 'componentDidMount()', 'constructor()'], answer: 'useState()', explanation: '`useState` is a React Hook that lets you add state to functional components. The others are part of class component lifecycle methods or syntax.' },
    { id: 11, testId: 2, difficulty: 'medium', question: "What is the Virtual DOM?", type: 'mcq', options: ['A direct copy of the HTML DOM', 'A JavaScript object representing the DOM', 'A browser feature for faster rendering', 'A type of shadow DOM'], answer: 'A JavaScript object representing the DOM', explanation: "The Virtual DOM (VDOM) is a programming concept where a virtual representation of a UI is kept in memory and synced with the 'real' DOM by libraries like React. This allows for efficient updates by batching changes and minimizing direct DOM manipulation." },
    { id: 12, testId: 2, difficulty: 'medium', question: "What is the difference between `==` and `===` in JavaScript?", type: 'subjective', answer: "The `==` operator performs type coercion before comparison (loose equality), meaning it will try to convert the operands to a common type. The `===` operator (strict equality) checks for both value and type equality without coercion.", explanation: "It is generally recommended to use `===` to avoid unexpected bugs from type coercion." },
    { id: 13, testId: 2, difficulty: 'medium', question: "What is a 'closure' in JavaScript?", type: 'subjective', answer: "A closure is a function that has access to its outer function's scope even after the outer function has returned. It 'closes over' the variables from its lexical scope, allowing it to remember and access those variables.", explanation: "Closures are a powerful and fundamental concept in JavaScript, enabling data privacy and function factories." },
    { id: 14, testId: 2, difficulty: 'medium', question: "What does the `position: relative;` property do in CSS?", type: 'subjective', answer: "It positions an element relative to its normal position in the document flow. You can then use `top`, `right`, `bottom`, and `left` properties to offset it from this normal position without affecting the layout of surrounding elements. It also creates a new stacking context and acts as the containing block for any absolutely positioned child elements.", explanation: "It's a key property for controlling layout and is often used as a container for absolutely positioned elements." },
    { id: 15, testId: 2, difficulty: 'medium', question: "What is event bubbling in the DOM?", type: 'subjective', answer: "Event bubbling is a type of event propagation where an event first triggers on the innermost target element, and then successively on its ancestors (parents) in the DOM tree until it reaches the document's root object. This is the default behavior for most DOM events.", explanation: "Understanding event propagation (bubbling and its opposite, capturing) is key for handling complex user interactions and for techniques like event delegation." },
    // Test 3: 15 Questions (9 MCQ, 6 Subjective)
    { id: 16, testId: 3, difficulty: 'medium', question: "What is JSX?", type: 'mcq', options: ['A templating language for JavaScript', 'A syntax extension for JavaScript that looks like HTML', 'A CSS preprocessor', 'A database query language'], answer: 'A syntax extension for JavaScript that looks like HTML', explanation: "JSX allows developers to write HTML-like code within JavaScript, which is then compiled into standard JavaScript function calls by tools like Babel." },
    { id: 17, testId: 3, difficulty: 'medium', question: "What does the `...` spread syntax do in JavaScript?", type: 'mcq', options: ['It condenses an array into a single value', 'It expands an iterable (like an array or object) into individual elements', 'It is used for comments', 'It creates a new function'], answer: 'It expands an iterable (like an array or object) into individual elements', explanation: "The spread syntax is used to copy array or object properties, or to pass elements of an array as individual arguments to a function." },
    { id: 18, testId: 3, difficulty: 'medium', question: "What is the purpose of `useEffect` in React?", type: 'mcq', options: ['To manage component state', 'To handle side effects', 'To render JSX', 'To pass props'], answer: 'To handle side effects', explanation: "`useEffect` is a hook used for side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM." },
    { id: 19, testId: 3, difficulty: 'medium', question: "What are React Fragments used for?", type: 'mcq', options: ['A way to group a list of children without adding extra nodes to the DOM', 'A tool for debugging React components', 'A special type of React component', 'A lifecycle method'], answer: 'A way to group a list of children without adding extra nodes to the DOM', explanation: "Fragments, written as `<>...</>` or `<React.Fragment>...</React.Fragment>`, solve the problem of needing a single root element without adding an unnecessary div to the DOM." },
    { id: 20, testId: 3, difficulty: 'medium', question: "Which of the following is used for client-side routing in a standard React app (not Next.js)?", type: 'mcq', options: ['Node.js', 'Express.js', 'React Router', 'Next.js'], answer: 'React Router', explanation: "React Router is the most popular library for handling routing on the client side in a React application. Next.js has its own built-in file-based routing." },
    { id: 21, testId: 3, difficulty: 'medium', question: "What is tree shaking in the context of JavaScript bundlers?", type: 'mcq', options: ['A debugging technique', 'A process to eliminate dead code', 'A way to visualize the component tree', 'A code formatting tool'], answer: 'A process to eliminate dead code', explanation: "Tree shaking is a term for dead-code elimination. Bundlers like Webpack or Rollup analyze the import/export statements and remove unused code from the final bundle." },
    { id: 22, testId: 3, difficulty: 'medium', question: "What is the purpose of the `defer` attribute on a `<script>` tag?", type: 'mcq', options: ['It stops the script from executing', 'It executes the script asynchronously as soon as it is downloaded', 'It executes the script after the document has been parsed, but before `DOMContentLoaded`', 'It executes the script before any HTML is parsed'], answer: 'It executes the script after the document has been parsed, but before `DOMContentLoaded`', explanation: "`defer` ensures scripts are executed in order after the HTML is parsed, without blocking the parsing process itself." },
    { id: 23, testId: 3, difficulty: 'medium', question: "What is lazy loading in the context of web performance?", type: 'mcq', options: ['Loading all assets at once', 'Delaying the loading of non-critical resources until they are needed', 'A CSS loading strategy', 'A database query optimization'], answer: 'Delaying the loading of non-critical resources until they are needed', explanation: "Lazy loading commonly applies to images or components that are off-screen, improving initial load time and saving bandwidth." },
    { id: 24, testId: 3, difficulty: 'medium', question: "What is `JSON.stringify()` used for?", type: 'mcq', options: ["To parse a JSON string into a JavaScript object", "To convert a JavaScript object into a JSON string", "To check if a string is valid JSON", "To string all values in a JSON object"], answer: "To convert a JavaScript object into a JSON string" },
    { id: 25, testId: 3, difficulty: 'medium', question: "What is the `Promise.all()` method used for?", type: 'subjective', answer: "`Promise.all()` takes an iterable of promises and returns a single Promise that resolves when all of the promises in the iterable have resolved. If any of the promises reject, the returned promise immediately rejects with the reason of the first promise that rejected." },
    { id: 26, testId: 3, difficulty: 'medium', question: "What are CSS pseudo-classes?", type: 'subjective', answer: "A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). They are used to style elements based on user interaction or their position in the DOM. Examples include `:hover`, `:focus`, `:first-child`, and `:nth-child()`." },
    { id: 27, testId: 3, difficulty: 'medium', question: "Explain the concept of 'hoisting' in JavaScript.", type: 'subjective', answer: "Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope before code execution. `var` declarations are hoisted and initialized with `undefined`. `let` and `const` are hoisted but not initialized, which creates a 'Temporal Dead Zone' where they cannot be accessed before their declaration." },
    { id: 28, testId: 3, difficulty: 'medium', question: "What is the difference between `null` and `undefined` in JavaScript?", type: 'subjective', answer: "`undefined` typically means a variable has been declared but has not yet been assigned a value. It's the default value of uninitialized variables. `null` is an assignment value that can be assigned to a variable to represent the intentional absence of any object value." },
    { id: 29, testId: 3, difficulty: 'medium', question: "How does CSS Grid Layout differ from Flexbox?", type: 'subjective', answer: "The primary difference is that Flexbox is designed for one-dimensional layouts (a row OR a column). CSS Grid is designed for two-dimensional layouts (rows AND columns at the same time). Grid provides more control over the overall page layout, while Flexbox excels at aligning content within a container." },
    { id: 30, testId: 3, difficulty: 'medium', question: "Explain the `async` and `await` keywords in JavaScript.", type: 'subjective', answer: "`async` functions are a special syntax for working with promises. An `async` function always returns a promise. The `await` keyword can only be used inside an `async` function and it pauses the function's execution, waiting for a promise to resolve or reject. This makes asynchronous code look and behave more like synchronous code, improving readability." },
    // Test 4: 20 Questions (12 MCQ, 8 Subjective)
    { id: 31, testId: 4, difficulty: 'medium', question: "What is a higher-order component (HOC) in React?", type: 'mcq', options: ['A component that renders other components', 'A function that takes a component and returns a new component with additional props or logic', 'A parent component in the component tree', 'Any component that uses hooks'], answer: 'A function that takes a component and returns a new component with additional props or logic', explanation: "HOCs are a pattern for reusing component logic. A HOC is not a component itself, but a function that enhances a component." },
    { id: 32, testId: 4, difficulty: 'medium', question: "What is the `useReducer` hook?", type: 'mcq', options: ['An alternative to `useState` for complex state logic', 'A hook for reducing bundle size', 'A hook for performing animations', 'A hook for data fetching'], answer: 'An alternative to `useState` for complex state logic', explanation: "`useReducer` is generally preferred over `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one." },
    { id: 33, testId: 4, difficulty: 'medium', question: "What are the three main properties of a Flexbox layout?", type: 'mcq', options: ['flex-direction, justify-content, align-items', 'display, position, float', 'grid-template, grid-gap, grid-area', 'width, height, margin'], answer: 'flex-direction, justify-content, align-items' },
    { id: 34, testId: 4, difficulty: 'medium', question: "What is a `Set` in JavaScript?", type: 'mcq', options: ['A collection of unique values', 'A collection of key/value pairs', 'A sorted list of values', 'An immutable array'], answer: 'A collection of unique values', explanation: "A `Set` object lets you store unique values of any type, whether primitive values or object references." },
    { id: 35, testId: 4, difficulty: 'medium', question: "What is the `z-index` property in CSS used for?", type: 'mcq', options: ['To control the vertical stacking order of elements', 'To set the zoom level of an element', 'To define the font size', 'To create a 3D effect'], answer: 'To control the vertical stacking order of elements', explanation: "An element with a greater stack order is always in front of an element with a lower stack order. `z-index` only works on positioned elements (position: absolute, relative, fixed, or sticky)." },
    { id: 36, testId: 4, difficulty: 'medium', question: "Which of these is a pseudo-element in CSS?", type: 'mcq', options: ['::before', ':hover', ':focus', ':active'], answer: '::before', explanation: 'Pseudo-elements like `::before` and `::after` create an element that can be styled, whereas pseudo-classes like `:hover` apply to an existing element in a certain state.' },
    { id: 37, testId: 4, difficulty: 'medium', question: "What is the difference between `npm` and `npx`?", type: 'mcq', options: ['They are the same', '`npm` is for installing packages, `npx` is for executing packages', '`npm` is for frontend, `npx` is for backend', '`npx` is a typo for `npm`'], answer: '`npm` is for installing packages, `npx` is for executing packages', explanation: "`npx` allows you to execute a package from the npm registry without installing it globally or in your project." },
    { id: 38, testId: 4, difficulty: 'hard', question: "What is 'Time to First Byte' (TTFB)?", type: 'mcq', options: ['The time it takes for the browser to receive the first byte of a response from the server', 'The total time to load a page', 'The time to execute the first JavaScript file', 'The time to render the first pixel'], answer: 'The time it takes for the browser to receive the first byte of a response from the server', explanation: "TTFB is a metric for measuring the responsiveness of a web server." },
    { id: 39, testId: 4, difficulty: 'medium', question: "What is the `yield` keyword in JavaScript used for?", type: 'mcq', options: ['To pause and resume a generator function', 'To return a value from a standard function', 'To create a new thread', 'To declare a variable'], answer: 'To pause and resume a generator function' },
    { id: 40, testId: 4, difficulty: 'hard', question: "What is the `prefers-reduced-motion` media query?", type: 'mcq', options: ["To reduce the amount of JavaScript loaded", "To detect if the user has requested the system minimize the amount of non-essential motion it uses", "To decrease the image quality", "To switch to a dark theme"], answer: "To detect if the user has requested the system minimize the amount of non-essential motion it uses", explanation: "This is an important accessibility feature to disable or reduce animations for users who are sensitive to motion." },
    { id: 41, testId: 4, difficulty: 'hard', question: "What is the purpose of `.map` files often seen in production builds?", type: 'mcq', options: ['They are image files', 'They are source maps for debugging minified code', 'They are configuration files', 'They are web manifest files'], answer: 'They are source maps for debugging minified code', explanation: "Source maps allow you to see your original source code in the browser's developer tools, even though the browser is running minified/uglified code." },
    { id: 42, testId: 4, difficulty: 'hard', question: "What is the `at()` method for JavaScript arrays?", type: 'mcq', options: ['To find an element at a specific index, supporting negative indices', 'To concatenate two arrays', 'To sort an array', 'To check if an array contains a certain value'], answer: 'To find an element at a specific index, supporting negative indices', explanation: "`myArray.at(-1)` returns the last item in the array, which is more concise than `myArray[myArray.length - 1]`." },
    { id: 43, testId: 4, difficulty: 'medium', question: "Explain the concept of 'memoization' in React.", type: 'subjective', answer: "Memoization is an optimization technique used to speed up component rendering by caching the results of expensive function calls or component renders. When the inputs are the same, it returns the cached result instead of re-computing. React provides `React.memo` for components, `useMemo` for values, and `useCallback` for functions." },
    { id: 44, testId: 4, difficulty: 'medium', question: "What is Cross-Site Scripting (XSS)?", type: 'subjective', answer: "XSS is a security vulnerability that allows an attacker to inject malicious scripts into web pages viewed by other users. React helps prevent XSS by automatically escaping JSX content before rendering it, converting strings to plain text." },
    { id: 45, testId: 4, difficulty: 'medium', question: "What is the `useCallback` hook in React used for?", type: 'subjective', answer: "`useCallback` returns a memoized version of a callback function that only changes if one of its dependencies has changed. It's useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary re-renders (e.g., components wrapped in `React.memo`)." },
    { id: 46, testId: 4, difficulty: 'medium', question: "What is server-side rendering (SSR)?", type: 'subjective', answer: "Server-side rendering is the ability of an application to render the initial page on the server, sending a fully rendered HTML page to the client. This improves initial page load performance (perceived speed) and is beneficial for SEO as search engine crawlers can index the content immediately." },
    { id: 47, testId: 4, difficulty: 'medium', question: "What are controlled and uncontrolled components in React?", type: 'subjective', answer: "A controlled component is a form element (like `<input>`) whose value is controlled by React state. The state is the single source of truth. An uncontrolled component is a form element whose value is handled by the DOM itself. You typically use a `ref` to get its value when needed." },
    { id: 48, testId: 4, difficulty: 'medium', question: "What is CORS (Cross-Origin Resource Sharing)?", type: 'subjective', answer: "CORS is a browser security feature that restricts cross-origin HTTP requests initiated from scripts. By default, browsers block these requests. To allow them, the server at the requested origin must include specific CORS headers (like `Access-Control-Allow-Origin`) in its response." },
    { id: 49, testId: 4, difficulty: 'medium', question: "What are service workers?", type: 'subjective', answer: "Service workers are scripts that your browser runs in the background, separate from a web page, enabling features that don't need a web page or user interaction. Key features include offline capabilities (caching assets), background sync, and push notifications. They are a core part of Progressive Web Apps (PWAs)." },
    { id: 50, testId: 4, difficulty: 'medium', question: "What is the critical rendering path?", type: 'subjective', answer: "The critical rendering path is the sequence of steps the browser goes through to convert HTML, CSS, and JavaScript into pixels on the screen. Optimizing it involves minimizing the number of critical resources, reducing their size, and optimizing the order in which they are loaded and processed to achieve the fastest possible initial render." },
    // Test 5: 25 Questions (15 MCQ, 10 Subjective)
    { id: 51, testId: 5, difficulty: 'medium', question: "What is `prop drilling` in React?", type: 'mcq', options: ["A performance optimization technique", "Passing props down through multiple layers of nested components", "A way to fetch data", "A specific type of error"], answer: "Passing props down through multiple layers of nested components" },
    { id: 52, testId: 5, difficulty: 'medium', question: "Which of these is NOT a valid HTTP method?", type: 'mcq', options: ["GET", "POST", "PUSH", "DELETE"], answer: "PUSH" },
    { id: 53, testId: 5, difficulty: 'medium', question: "What is the `BEM` methodology in CSS?", type: 'mcq', options: ["A JavaScript framework", "A naming convention for classes", "A CSS preprocessor", "A type of CSS selector"], answer: "A naming convention for classes", explanation: "BEM (Block, Element, Modifier) helps create more readable, maintainable, and reusable CSS." },
    { id: 54, testId: 5, difficulty: 'medium', question: "In CSS, what is the difference between `em` and `rem` units?", type: 'mcq', options: ["`em` is relative to the parent's font-size, `rem` is relative to the root's font-size", "`rem` is relative to the parent's font-size, `em` is relative to the root's font-size", "They are the same", " `em` is for width, `rem` is for height"], answer: "`em` is relative to the parent's font-size, `rem` is relative to the root's font-size" },
    { id: 55, testId: 5, difficulty: 'medium', question: "What is the purpose of the `key` prop in React lists?", type: 'mcq', options: ["It's a unique identifier for the component in the DOM", "It helps React identify which items have changed, are added, or are removed", "It is used for styling", "It is passed as a prop to the component"], answer: "It helps React identify which items have changed, are added, or are removed" },
    { id: 56, testId: 5, difficulty: 'hard', question: "What is a `WeakMap` in JavaScript?", type: 'mcq', options: ["A Map that cannot be iterated", "A Map that only holds weak references to its keys, allowing them to be garbage collected", "A less performant version of Map", "An alias for an Object"], answer: "A Map that only holds weak references to its keys, allowing them to be garbage collected" },
    { id: 57, testId: 5, difficulty: 'medium', question: "What does the `Array.prototype.reduce` method do?", type: 'mcq', options: ["Creates a new array with the results of calling a function on every element", "Filters an array based on a condition", "Executes a function on each element and returns a single accumulated value", "Checks if at least one element in the array passes a test"], answer: "Executes a function on each element and returns a single accumulated value" },
    { id: 58, testId: 5, difficulty: 'medium', question: "Which HTML5 element is best for embedding a video?", type: 'mcq', options: ["<media>", "<embed>", "<object>", "<video>"], answer: "<video>" },
    { id: 59, testId: 5, difficulty: 'medium', question: "What is a pure function?", type: 'mcq', options: ["A function with no arguments", "A function that has no side effects and returns the same output for the same input", "A function that only exists in React", "A function that returns another function"], answer: "A function that has no side effects and returns the same output for the same input" },
    { id: 60, testId: 5, difficulty: 'hard', question: "What is CSS Containment?", type: 'mcq', options: ["A property to contain elements within the viewport", "A property (`contain`) that allows you to isolate a part of the page for performance optimization", "A security feature to contain scripts", "A way to group CSS variables"], answer: "A property (`contain`) that allows you to isolate a part of the page for performance optimization" },
    { id: 61, testId: 5, difficulty: 'hard', question: "What is `git stash` used for?", type: 'mcq', options: ["To delete uncommitted changes", "To save uncommitted changes temporarily without committing them", "To merge branches", "To create a new commit"], answer: "To save uncommitted changes temporarily without committing them" },
    { id: 62, testId: 5, difficulty: 'hard', question: "What is `requestAnimationFrame` primarily used for?", type: 'mcq', options: ["Fetching data from an API", "Running background tasks", "Performing smooth animations in the browser", "Debouncing user input"], answer: "Performing smooth animations in the browser" },
    { id: 63, testId: 5, difficulty: 'hard', question: "What is the purpose of the `rel='noopener'` attribute on a link?", type: 'mcq', options: ["To stop search engines from following the link", "To prevent the new page from being able to access the `window.opener` property for security", "To open the link in a special popup", "To load the link content in the background"], answer: "To prevent the new page from being able to access the `window.opener` property for security" },
    { id: 64, testId: 5, difficulty: 'medium', question: "Which is a valid way to create a multi-line comment in JavaScript?", type: 'mcq', options: ["<!-- This is a comment -->", "/* This is a comment */", "# This is a comment", "--- This is a comment ---"], answer: "/* This is a comment */" },
    { id: 65, testId: 5, difficulty: 'hard', question: "What is the `for...of` loop used for in JavaScript?", type: 'mcq', options: ["Iterating over the properties of an object", "Iterating over the values of an iterable object (like an Array or String)", "Creating a loop that runs a specific number of times", "It is an alias for the `for...in` loop"], answer: "Iterating over the values of an iterable object (like an Array or String)" },
    { id: 66, testId: 5, difficulty: 'medium', question: "How can you avoid 'prop drilling' in React?", type: 'subjective', answer: "Prop drilling can be avoided by using state management solutions. For global or widely shared state, a library like Redux or Zustand is common. For state shared between a few nested components, the built-in React Context API is an excellent choice. It allows you to 'provide' a value at a high level and consume it at any lower level without passing it through intermediate components." },
    { id: 67, testId: 5, difficulty: 'medium', question: "What is a 'polyfill'?", type: 'subjective', answer: "A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it. It 'fills in' the gap in the browser's implementation." },
    { id: 68, testId: 5, difficulty: 'medium', question: "What is the difference between `localStorage` and `sessionStorage`?", type: 'subjective', answer: "Both are web storage APIs. `localStorage` stores data with no expiration date; it persists even when the browser is closed and reopened. `sessionStorage` only stores data for one session, meaning the data is cleared as soon as the browser tab is closed." },
    { id: 69, testId: 5, difficulty: 'medium', question: "In CSS, what is specificity?", type: 'subjective', answer: "Specificity is the algorithm used by browsers to determine which CSS rule is the most 'specific' and therefore should be applied to an element when multiple conflicting rules exist. Specificity is calculated based on a weighted score of ID, class/attribute, and type selectors. An inline style has the highest specificity." },
    { id: 70, testId: 5, difficulty: 'medium', question: "What is a Web Component?", type: 'subjective', answer: "Web Components are a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps. They are based on four main specifications: Custom Elements, Shadow DOM, ES Modules, and HTML Template." },
    { id: 71, testId: 5, difficulty: 'medium', question: "Explain what ARIA attributes are and why they are important.", type: 'subjective', answer: "ARIA (Accessible Rich Internet Applications) is a set of attributes you can add to HTML elements to improve their accessibility. They provide additional semantics for assistive technologies like screen readers, especially for dynamic content and complex UI controls that native HTML doesn't cover. For example, `role='alert'` or `aria-expanded='true'`." },
    { id: 72, testId: 5, difficulty: 'hard', question: "Describe the JavaScript event loop.", type: 'subjective', answer: "The event loop is a mechanism that allows the browser or Node.js to handle asynchronous operations. It consists of a call stack, a message queue (or callback queue), and Web APIs. When an async operation completes (e.g., a `setTimeout`), its callback is placed in the queue. The event loop continuously checks if the call stack is empty. If it is, it takes the first message from the queue and pushes it onto the stack to be executed." },
    { id: 73, testId: 5, difficulty: 'hard', question: "What are WebSockets?", type: 'subjective', answer: "WebSockets provide a full-duplex communication channel over a single, long-lived TCP connection. Unlike traditional HTTP, which is request-response based, WebSockets allow for real-time, two-way communication between the client and server, making them ideal for applications like live chat, real-time gaming, and live data feeds." },
    { id: 74, testId: 5, difficulty: 'medium', question: "What is 'lifting state up' in React?", type: 'subjective', answer: "Lifting state up is a common pattern in React where you move the shared state from multiple components up to their closest common ancestor. The ancestor component then owns the 'single source of truth' and passes the state and state-updating functions down to the children via props. This is used when several components need to reflect the same changing data." },
    { id: 75, testId: 5, difficulty: 'medium', question: "What is the purpose of semantic HTML tags?", type: 'subjective', answer: "Semantic HTML tags are tags that clearly describe their meaning in a human- and machine-readable way. Tags like `<header>`, `<footer>`, `<article>`, and `<section>` explicitly define the structure of the document. This improves accessibility (for screen readers) and SEO (for search engine crawlers)." },
    // Test 6: 30 Questions (18 MCQ, 12 Subjective)
    { id: 76, testId: 6, difficulty: 'hard', question: "What is the `useLayoutEffect` hook in React and how does it differ from `useEffect`?", type: 'mcq', options: ["It runs before the component renders", "It fires synchronously after all DOM mutations, but before the browser has painted", "It's an alias for `useEffect`", "It only runs on the server"], answer: "It fires synchronously after all DOM mutations, but before the browser has painted", explanation: "This makes it suitable for reading layout from the DOM and synchronously re-rendering. `useEffect` runs asynchronously after the render is painted." },
    { id: 77, testId: 6, difficulty: 'hard', question: "In CSS Grid, what is the `fr` unit?", type: 'mcq', options: ['A fixed unit equal to 1 pixel', 'A unit representing a fraction of the free space in the grid container', 'A percentage of the viewport width', 'A unit relative to the font size'], answer: 'A unit representing a fraction of the free space in the grid container' },
    { id: 78, testId: 6, difficulty: 'hard', question: "What does the `finally` method do on a JavaScript Promise?", type: 'mcq', options: ['It executes only if the promise is resolved', 'It executes only if the promise is rejected', 'It executes when the promise is settled (either resolved or rejected)', 'It returns the final value of the promise'], answer: 'It executes when the promise is settled (either resolved or rejected)' },
    { id: 79, testId: 6, difficulty: 'hard', question: "What is `Object.seal()` in JavaScript?", type: 'mcq', options: ['It prevents any changes to an object', 'It prevents adding new properties and marks existing properties as non-configurable', 'It makes an object read-only', 'It deletes an object'], answer: 'It prevents adding new properties and marks existing properties as non-configurable' },
    { id: 80, testId: 6, difficulty: 'hard', question: "What is the main difference between PUT and PATCH HTTP methods?", type: 'mcq', options: ['PUT is for creating, PATCH is for updating', 'PUT replaces the entire resource, PATCH applies a partial update', 'PATCH is more secure than PUT', 'There is no difference'], answer: 'PUT replaces the entire resource, PATCH applies a partial update' },
    { id: 81, testId: 6, difficulty: 'hard', question: "What does the `...` rest parameter syntax do in a function signature?", type: 'mcq', options: ['It indicates the function returns a promise', 'It allows a function to accept an indefinite number of arguments as an array', 'It spreads an array into individual arguments', 'It is for comments'], answer: 'It allows a function to accept an indefinite number of arguments as an array' },
    { id: 82, testId: 6, difficulty: 'medium', question: "What is `git merge` used for?", type: 'mcq', options: ['To create a new repository', 'To switch branches', 'To join two or more development histories together', 'To delete a commit'], answer: 'To join two or more development histories together' },
    { id: 83, testId: 6, difficulty: 'hard', question: "What is a `Proxy` object in JavaScript?", type: 'mcq', options: ['A network proxy configuration', 'An object used to define custom behavior for fundamental operations (e.g., property lookup)', 'A placeholder for a future value', 'A security feature'], answer: 'An object used to define custom behavior for fundamental operations (e.g., property lookup)' },
    { id: 84, testId: 6, difficulty: 'hard', question: "Which CSS property can be used to prevent text from wrapping?", type: 'mcq', options: ['text-wrap: no-wrap', 'word-break: break-all', 'white-space: nowrap', 'overflow: hidden'], answer: 'white-space: nowrap' },
    { id: 85, testId: 6, difficulty: 'medium', question: "What is the `DOMContentLoaded` event?", type: 'mcq', options: ['It fires when the entire page has loaded, including all dependent resources such as stylesheets and images', 'It fires when the initial HTML document has been completely loaded and parsed', 'It fires when a user clicks on the document', 'It fires when an AJAX request is completed'], answer: 'It fires when the initial HTML document has been completely loaded and parsed' },
    { id: 86, testId: 6, difficulty: 'hard', question: "What is the purpose of the `super()` keyword in a class constructor?", type: 'mcq', options: ['To call the constructor of the parent class', 'To create a superclass', 'To refer to the current object instance', 'To define static methods'], answer: 'To call the constructor of the parent class' },
    { id: 87, testId: 6, difficulty: 'medium', question: "What is the `aria-live` attribute used for?", type: 'mcq', options: ['To style live-streaming video', 'To indicate that an element will be updated, and to describe the types of updates for screen readers', 'To set the language of an element', 'To hide an element from screen readers'], answer: 'To indicate that an element will be updated, and to describe the types of updates for screen readers' },
    { id: 88, testId: 6, difficulty: 'hard', question: "Which is a valid way to create a private class field in modern JavaScript?", type: 'mcq', options: ['`let myVar`', '`this._myVar`', '`const myVar`', '`#myVar`'], answer: '`#myVar`' },
    { id: 89, testId: 6, difficulty: 'hard', question: "What is a `PureComponent` in React?", type: 'mcq', options: ['A component with no state', 'A component that only contains pure functions', 'A class component that implements a shallow prop and state comparison to prevent unnecessary re-renders', 'A functional component'], answer: 'A class component that implements a shallow prop and state comparison to prevent unnecessary re-renders' },
    { id: 90, testId: 6, difficulty: 'hard', question: "What is a `Symbol` in JavaScript used for?", type: 'mcq', options: ['To create unique object properties to avoid name collisions', 'To store special characters', 'To create vector graphics', 'To perform mathematical operations'], answer: 'To create unique object properties to avoid name collisions' },
    { id: 91, testId: 6, difficulty: 'hard', question: "Why is `requestAnimationFrame` better for animations than `setTimeout`?", type: 'mcq', options: ['It runs code after a specified delay with higher priority', 'It synchronizes with the browser\'s repaint cycle for smoother animations', 'It is a newer version of `setInterval`', 'It is used exclusively for network requests'], answer: 'It synchronizes with the browser\'s repaint cycle for smoother animations' },
    { id: 92, testId: 6, difficulty: 'hard', question: "What is webpack's Module Federation?", type: 'mcq', options: ['A way to manage different versions of the same module', 'A method for loading modules from a CDN', 'A feature that allows a JavaScript application to dynamically load code from another application', 'A security policy for modules'], answer: 'A feature that allows a JavaScript application to dynamically load code from another application' },
    { id: 93, testId: 6, difficulty: 'medium', question: "What is the CSS `box-sizing: border-box;` property for?", type: 'mcq', options: ["It tells the browser to include padding and border in the element's total width and height", "It makes the element a block-level box", "It controls the sizing of the box shadow", "It is the default box-sizing value"], answer: "It tells the browser to include padding and border in the element's total width and height" },
    { id: 94, testId: 6, difficulty: 'hard', question: "What is an `IndexedDB` and what are its use cases?", type: 'subjective', answer: "IndexedDB is a low-level API for client-side storage of large amounts of structured data, including files/blobs. It's a transactional database system built into the browser. Use cases include caching application data for offline use, storing user-generated content before it's uploaded, and building full-fledged offline applications." },
    { id: 95, testId: 6, difficulty: 'medium', question: "How would you debounce a function in JavaScript?", type: 'subjective', answer: "Debouncing is a technique to limit the rate at which a function gets called. You would create a wrapper function that uses `setTimeout`. Inside the wrapper, you first clear any existing timeout, then set a new timeout to execute the original function after a specified delay. This ensures the function only runs once after a burst of calls." },
    { id: 96, testId: 6, difficulty: 'hard', question: "Explain how the `this` keyword works in JavaScript.", type: 'subjective', answer: "The value of `this` is determined by how a function is called (its execution context). In a method (e.g., `obj.myMethod()`), `this` refers to the owner object. In a regular function, `this` refers to the global object (`window` in browsers) or `undefined` in strict mode. In an event handler, `this` refers to the element that received the event. Arrow functions do not have their own `this`; they lexically bind it from their parent scope." },
    { id: 97, testId: 6, difficulty: 'hard', question: "What are CSS Custom Properties (Variables) and what are their benefits?", type: 'subjective', answer: "CSS Custom Properties are entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., `--main-color: #ff0000;`) and are accessed using the `var()` function. Benefits include DRY (Don't Repeat Yourself) code, easier theming, and the ability to be read and changed dynamically via JavaScript." },
    { id: 98, testId: 6, difficulty: 'hard', question: "What is hydration in the context of SSR with React?", type: 'subjective', answer: "Hydration is the process of attaching event listeners and making the static HTML received from a server-side rendering (SSR) process interactive. React 'hydrates' the server-rendered HTML by building its virtual DOM in memory, comparing it to the existing HTML, and then attaching the necessary JavaScript logic and event listeners to the markup." },
    { id: 99, testId: 6, difficulty: 'hard', question: "What is the difference between a `Map` and a `WeakMap` in JavaScript?", type: 'subjective', answer: "A `Map` can have any value (primitive or object) as a key and holds strong references to its keys, preventing them from being garbage collected. A `WeakMap` only accepts objects as keys and holds 'weak' references, meaning if there are no other references to an object used as a key, it can be garbage collected. `WeakMap` is not iterable." },
    { id: 100, testId: 6, difficulty: 'hard', question: "Explain event delegation in JavaScript.", type: 'subjective', answer: 'Event delegation is a technique where you add a single event listener to a parent element to manage events for all of its children, including dynamically added ones. When an event bubbles up from a child, the parent listener can check the `event.target` property to identify which child triggered the event and respond accordingly. This improves performance by reducing the number of event listeners.' },
    { id: 101, testId: 6, difficulty: 'hard', question: "How does React's reconciliation algorithm work?", type: 'subjective', answer: "Reconciliation is the process through which React updates the DOM. When a component's state or props change, React creates a new virtual DOM tree. It then compares ('diffs') this new tree with the previous one. Based on this comparison, it computes the most efficient, minimal set of changes needed to update the real DOM and applies them in a batch." },
    { id: 102, testId: 6, difficulty: 'hard', question: "What are render props in React?", type: 'subjective', answer: "The term 'render prop' refers to a technique for sharing code between React components using a prop whose value is a function that returns a React element. A component with a render prop (e.g., `<DataProvider render={data => <h1>{data.name}</h1>} />`) calls this function to delegate its rendering logic, enabling powerful and flexible composition." },
    { id: 103, testId: 6, difficulty: 'hard', question: "What is the difference between throttling and debouncing?", type: 'subjective', answer: "Throttling guarantees that a function is executed at most once per specified time period (e.g., once every 100ms). Debouncing ensures that a function is only called after a certain period of inactivity (e.g., after the user stops typing for 300ms). Throttling is about limiting the rate, while debouncing is about waiting for a pause." },
    { id: 104, testId: 6, difficulty: 'hard', question: "What is a Progressive Web App (PWA)?", type: 'subjective', answer: "A PWA is a web application that uses modern web capabilities to deliver an app-like experience. Key features include being installable on the user's home screen, working offline via a service worker, and offering push notifications. They aim to combine the reach of the web with the user experience of a native app." },
    { id: 105, testId: 6, difficulty: 'hard', question: "What is the `Same-Origin Policy` and why is it important?", type: 'subjective', answer: 'The Same-Origin Policy (SOP) is a critical security mechanism in web browsers. It restricts how a document or script loaded from one origin (domain, protocol, port) can interact with a resource from another origin. This helps prevent malicious scripts on one page from accessing sensitive data on another page.' },
    // Test 7: 35 Questions (21 MCQ, 14 Subjective)
    { id: 106, testId: 7, difficulty: 'hard', question: "What is the CSS `overscroll-behavior` property used for?", type: 'mcq', options: ['It controls what happens when a user scrolls past the boundary of a scrolling area', 'It determines the speed of scrolling', 'It enables smooth scrolling', 'It is an alias for `overflow`'], answer: "It controls what happens when a user scrolls past the boundary of a scrolling area", explanation: "It can be used to prevent 'scroll chaining', where scrolling in a modal also scrolls the page behind it." },
    { id: 107, testId: 7, difficulty: 'hard', question: "What is the difference between a `class` and an `object` in JavaScript?", type: 'mcq', options: ['There is no difference', 'A class is a template for creating objects', 'An object is a template for creating classes', 'Classes are for data, objects are for functions'], answer: "A class is a template for creating objects", explanation: "A class is a blueprint, and an object is an instance created from that blueprint." },
    { id: 108, testId: 7, difficulty: 'hard', question: "What is the purpose of `git rebase`?", type: 'mcq', options: ['To merge two branches', 'To move or combine a sequence of commits to a new base commit', 'To delete a branch', 'To create a backup of the repository'], answer: "To move or combine a sequence of commits to a new base commit", explanation: "Rebasing is often used to maintain a linear project history." },
    { id: 109, testId: 7, difficulty: 'hard', question: "What does the `SameSite` attribute on a cookie control?", type: 'mcq', options: ["The cookie's expiration date", "Whether the cookie is sent with cross-site requests", "The cookie's value", "The cookie's domain"], answer: "Whether the cookie is sent with cross-site requests", explanation: "Setting `SameSite=Strict` or `Lax` is a key defense against Cross-Site Request Forgery (CSRF) attacks." },
    { id: 110, testId: 7, difficulty: 'hard', question: "What is `Promise.race()`?", type: 'mcq', options: ['It returns a promise that fulfills or rejects as soon as one of the promises in the iterable fulfills or rejects', 'It runs all promises in parallel and returns the fastest one', 'It is a syntax error', 'It returns a random promise from the iterable'], answer: "It returns a promise that fulfills or rejects as soon as one of the promises in the iterable fulfills or rejects" },
    { id: 111, testId: 7, difficulty: 'hard', question: "Which of these is a structural pseudo-class in CSS?", type: 'mcq', options: [':hover', ':active', ':nth-child(n)', ':focus'], answer: ":nth-child(n)", explanation: "Structural pseudo-classes select elements based on their position in the document tree, not their state." },
    { id: 112, testId: 7, difficulty: 'hard', question: "What is the purpose of a `webpack loader`?", type: 'mcq', options: ['To run tasks before or after the build', 'To transform files from a different language (like TypeScript or Sass) into JavaScript/CSS', 'To bundle multiple files into one', 'To optimize images'], answer: "To transform files from a different language (like TypeScript or Sass) into JavaScript/CSS" },
    { id: 113, testId: 7, difficulty: 'hard', question: "What is the `Shadow DOM`?", type: 'mcq', options: ['A virtual copy of the DOM', 'A hidden DOM that cannot be manipulated', 'A browser technology for encapsulating the structure and style of a web component', 'A dark theme for the DOM'], answer: "A browser technology for encapsulating the structure and style of a web component", explanation: "It prevents styles from inside a component from leaking out, and styles from the main page from leaking in." },
    { id: 114, testId: 7, difficulty: 'hard', question: "What is the HTTP `Authorization` header used for?", type: 'mcq', options: ['To specify the media type of the resource', 'To contain the credentials to authenticate a user agent with a server', 'To indicate which character sets are acceptable', 'To control caching'], answer: "To contain the credentials to authenticate a user agent with a server" },
    { id: 115, testId: 7, difficulty: 'hard', question: "What is the difference between `display: none` and `visibility: hidden`?", type: 'mcq', options: ['There is no difference', '`display: none` removes the element from the document flow, while `visibility: hidden` only hides it visually but it still takes up space', '`visibility: hidden` removes the element from the document flow', '`display: none` is for images only'], answer: '`display: none` removes the element from the document flow, while `visibility: hidden` only hides it visually but it still takes up space' },
    { id: 116, testId: 7, difficulty: 'hard', question: "What does the `async` keyword do in a JavaScript function declaration?", type: 'mcq', options: ['It makes the function run on a separate thread', 'It ensures the function always returns a `Promise`', 'It blocks the execution of the code', 'It indicates the function is a security risk'], answer: 'It ensures the function always returns a `Promise`' },
    { id: 117, testId: 7, difficulty: 'hard', question: "Which of the following is NOT a core concept of Redux?", type: 'mcq', options: ['Store', 'Action', 'Reducer', 'Component'], answer: 'Component', explanation: "While Redux is used with components (e.g., in React), the component itself is not a part of the core Redux architecture." },
    { id: 118, testId: 7, difficulty: 'hard', question: "What is a 'Generator' function in JavaScript (`function*`)?", type: 'mcq', options: ['A function that generates random numbers', 'A function that can be paused and resumed using the `yield` keyword', 'A function that automatically generates documentation', 'A function for generating HTML'], answer: 'A function that can be paused and resumed using the `yield` keyword' },
    { id: 119, testId: 7, difficulty: 'hard', question: "Which CSS value is used to make a flex item grow and shrink as needed, ignoring its initial size?", type: 'mcq', options: ['`flex: 1`', '`flex: auto`', '`flex: initial`', '`flex: none`'], answer: '`flex: 1`', explanation: "`flex: 1` is shorthand for `flex-grow: 1`, `flex-shrink: 1`, and `flex-basis: 0%`." },
    { id: 120, testId: 7, difficulty: 'hard', question: "What is a `meta` tag in HTML used for?", type: 'mcq', options: ['To define the main content', 'To provide metadata about the HTML document, such as character set, description, and viewport settings', 'To create a table', 'To embed another HTML page'], answer: 'To provide metadata about the HTML document, such as character set, description, and viewport settings' },
    { id: 121, testId: 7, difficulty: 'expert', question: "What is 'LCP' (Largest Contentful Paint) in Core Web Vitals?", type: 'mcq', options: ['Largest Contentful Paint', 'Layout Computation Period', 'Latency Critical Path', 'Loading Content Priority'], answer: 'Largest Contentful Paint', explanation: "It measures the render time of the largest image or text block visible within the viewport." },
    { id: 122, testId: 7, difficulty: 'hard', question: "What is the purpose of `Array.prototype.flat()`?", type: 'mcq', options: ["To flatten a multi-dimensional array into a new one-dimensional array", "To sort an array in place", "To add a new element to the end of an array", "To find the first element that satisfies a condition"], answer: "To flatten a multi-dimensional array into a new one-dimensional array" },
    { id: 123, testId: 7, difficulty: 'hard', question: "What is the `IntersectionObserver` API used for?", type: 'mcq', options: ["Observing changes to the intersection of a target element with an ancestor element or viewport", "Observing network requests", "Observing user interactions", "Observing changes in the CSS object model"], answer: "Observing changes to the intersection of a target element with an ancestor element or viewport" },
    { id: 124, testId: 7, difficulty: 'hard', question: "What is the `will-change` CSS property for?", type: 'mcq', options: ["To predict the future value of a property", "To hint to browsers how an element is expected to change, allowing for optimization", "To prevent a property from changing", "To animate a CSS property"], answer: "To hint to browsers how an element is expected to change, allowing for optimization" },
    { id: 125, testId: 7, difficulty: 'hard', question: "What is the difference between a `<div>` and a `<span>`?", type: 'mcq', options: ["There is no difference", "`<div>` is a block-level element, `<span>` is an inline element", "`<span>` is a block-level element, `<div>` is an inline element", "`<div>` is for images, `<span>` is for text"], answer: "`<div>` is a block-level element, `<span>` is an inline element" },
    { id: 126, testId: 7, difficulty: 'hard', question: "What is `ESLint`?", type: 'mcq', options: ["A JavaScript compiler", "A JavaScript testing framework", "A static analysis tool for identifying and fixing problems in JavaScript code", "A state management library"], answer: "A static analysis tool for identifying and fixing problems in JavaScript code" },
    { id: 127, testId: 7, difficulty: 'hard', question: "What is a `Symbol` in JavaScript?", type: 'subjective', answer: "A `Symbol` is a unique and immutable primitive data type introduced in ES6. Symbols are often used as keys for object properties to avoid name collisions, as each symbol value returned from `Symbol()` is guaranteed to be unique." },
    { id: 128, testId: 7, difficulty: 'expert', question: "What is the `ResizeObserver` API?", type: 'subjective', answer: "The `ResizeObserver` API provides a performant mechanism by which code can monitor an element for changes to its size. It's more efficient than listening to the window's resize event and manually checking element dimensions, as it avoids polling and layout thrashing." },
    { id: 129, testId: 7, difficulty: 'hard', question: "What is the difference between `let`, `const`, and `var`?", type: 'subjective', answer: "The main differences are scope and re-assignability. `var` is function-scoped and can be re-declared and updated. `let` is block-scoped and can be updated but not re-declared within the same scope. `const` is also block-scoped but cannot be updated or re-declared. `let` and `const` also have a 'temporal dead zone', unlike `var`." },
    { id: 130, testId: 7, difficulty: 'hard', question: "What is WebRTC?", type: 'subjective', answer: "WebRTC (Web Real-Time Communication) is an open-source project providing web browsers and mobile applications with real-time communication (RTC) capabilities via simple APIs. It allows for peer-to-peer audio, video, and data sharing directly between browsers without needing an intermediary server for the data itself (though signaling servers are needed for setup)." },
    { id: 131, testId: 7, difficulty: 'expert', question: "How can you optimize web font loading?", type: 'subjective', answer: 'Strategies include: 1. Self-hosting fonts to avoid extra DNS lookups. 2. Using `font-display: swap` or `optional` to prevent render-blocking. 3. Preloading critical fonts using `<link rel="preload">`. 4. Subsetting fonts to only include the characters the site actually uses. 5. Using modern, compressed formats like WOFF2.' },
    { id: 132, testId: 7, difficulty: 'hard', question: "What is 'code splitting'?", type: 'subjective', answer: "Code splitting is a feature supported by bundlers like Webpack or Rollup which can create multiple bundles that can be dynamically loaded at runtime. Instead of one massive bundle, you can split code by route or component. This is crucial for improving initial page load time, as the user only downloads the code needed for the initial view." },
    { id: 133, testId: 7, difficulty: 'hard', question: "What are ES modules (ESM)?", type: 'subjective', answer: 'ES Modules are the official, standardized module system for JavaScript, introduced in ES6. They use the `import` and `export` statements. Unlike older systems like CommonJS, ESM is resolved statically at parse time, which allows for powerful optimizations like tree shaking. They also have features like top-level await and are the standard for modern browsers and Node.js.' },
    { id: 134, testId: 7, difficulty: 'expert', question: "What is a 'flame graph' and how is it used for performance profiling?", type: 'subjective', answer: "A flame graph is a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately. Each box represents a function in the stack, with the y-axis showing stack depth and the x-axis showing the percentage of time that function was on the CPU. It's used to find performance bottlenecks by looking for wide plateaus at the top of the graph." },
    { id: 135, testId: 7, difficulty: 'hard', question: "What is OAuth 2.0?", type: 'subjective', answer: "OAuth 2.0 is an authorization framework, not an authentication protocol. It enables a third-party application to obtain limited access to a user's account on an HTTP service. It works by delegating user authentication to the service that hosts the user account and authorizing the third-party application to access the user account via access tokens, rather than sharing the user's credentials." },
    { id: 136, testId: 7, difficulty: 'expert', question: "Explain the concept of 'islands architecture'.", type: 'subjective', answer: "Islands architecture is a pattern for building websites that aims to reduce the amount of JavaScript shipped to the client. It works by rendering HTML pages on the server with zero or minimal JavaScript, and then injecting self-contained, interactive components ('islands') into them. This improves site performance by defaulting to static HTML and only 'hydrating' components when they become visible or interactive." },
    { id: 137, testId: 7, difficulty: 'expert', question: "What is an Abstract Syntax Tree (AST)?", type: 'subjective', answer: "An AST is a tree representation of the abstract syntactic structure of source code. Each node of the tree denotes a construct occurring in the code. Tools like compilers (Babel), linters (ESLint), and bundlers (Webpack) parse code into an AST to understand and transform it. For example, Babel uses an AST to convert ES6 code into ES5-compatible code." },
    { id: 138, testId: 7, difficulty: 'expert', question: "What are the advantages and disadvantages of micro-frontends?", type: 'subjective', answer: "Advantages: Allows independent deployments by autonomous teams, encourages reusable components, and allows teams to choose their own technology stack. Disadvantages: Can lead to code duplication and larger overall bundle sizes, complicates state management and routing between frontends, and can make maintaining a consistent user experience more challenging." },
    { id: 139, testId: 7, difficulty: 'expert', question: "What is the purpose of the `useImperativeHandle` hook in React?", type: 'subjective', answer: "`useImperativeHandle` customizes the instance value that is exposed to parent components when using `ref`. Instead of exposing the entire component instance, you can use this hook to expose a specific, limited set of functions. It's used in conjunction with `forwardRef` to avoid breaking encapsulation." },
    { id: 140, testId: 7, difficulty: 'expert', question: "What is a `stale-while-revalidate` caching strategy?", type: 'subjective', answer: "`stale-while-revalidate` is a caching strategy where a cached response is served immediately (stale), providing a fast response time. Simultaneously, a new request is made in the background to fetch a fresh version of the data, which then updates the cache for future requests. This provides a good balance between performance and data freshness." },
    // Test 8: 40 Questions (24 MCQ, 16 Subjective)
    { id: 141, testId: 8, difficulty: 'expert', question: "What is 'FID' (First Input Delay) in Core Web Vitals?", type: 'mcq', options: ['The time from when a user first interacts with a page to the time when the browser is actually able to respond to that interaction', 'The time it takes for the first content to paint', 'The total time the main thread was blocked', 'The frequency of input delays'], answer: 'The time from when a user first interacts with a page to the time when the browser is actually able to respond to that interaction' },
    { id: 142, testId: 8, difficulty: 'hard', question: "What is the `module/nomodule` pattern for script tags?", type: 'mcq', options: ['A way to load different scripts for different modules', 'A way to serve modern ES modules to modern browsers and legacy scripts to older browsers', 'A security feature to block modules', 'A pattern for Node.js only'], answer: 'A way to serve modern ES modules to modern browsers and legacy scripts to older browsers' },
    { id: 143, testId: 8, difficulty: 'expert', question: "What is a 'flame graph' used for in performance profiling?", type: 'mcq', options: ['Visualizing network requests', 'Visualizing CPU stack traces to find hot paths in code', 'Displaying memory allocation', 'Showing CSS rendering performance'], answer: 'Visualizing CPU stack traces to find hot paths in code' },
    { id: 144, testId: 8, difficulty: 'hard', question: "What is the `inputmode` attribute on an `<input>` element?", type: 'mcq', options: ['It defines the type of input (e.g., text, password)', 'It provides a hint to the browser for which keyboard to display (e.g., numeric, email)', 'It sets the input method for a form', 'It is a deprecated attribute'], answer: 'It provides a hint to the browser for which keyboard to display (e.g., numeric, email)' },
    { id: 145, testId: 8, difficulty: 'expert', question: "What is 'Head-of-Line Blocking' in HTTP/1.1?", type: 'mcq', options: ['A problem where a slow server blocks all clients', 'A problem where a single lost packet can block all subsequent requests on a TCP connection', 'A server configuration issue', 'A DNS resolution problem'], answer: 'A problem where a single lost packet can block all subsequent requests on a TCP connection' },
    { id: 146, testId: 8, difficulty: 'hard', question: "What is `Intl.PluralRules` used for in JavaScript?", type: 'mcq', options: ['To format numbers', 'To enable plural-sensitive formatting and language-specific rules for plurals', 'To handle date and time', 'To compare strings'], answer: 'To enable plural-sensitive formatting and language-specific rules for plurals' },
    { id: 147, testId: 8, difficulty: 'hard', question: "What is a main advantage of the WebP image format?", type: 'mcq', options: ['It is supported by all browsers ever made', 'It provides superior lossless and lossy compression compared to older formats like JPEG and PNG', 'It is a vector format', 'It is the only format that supports animation'], answer: 'It provides superior lossless and lossy compression compared to older formats like JPEG and PNG' },
    { id: 148, testId: 8, difficulty: 'hard', question: "What is a `Shared Worker`?", type: 'mcq', options: ['A web worker that can be accessed from several browsing contexts (e.g., windows, iframes) from the same origin', 'A worker that is shared between different users', 'A worker for performing `ArrayBuffer` operations', 'A deprecated API'], answer: 'A web worker that can be accessed from several browsing contexts (e.g., windows, iframes) from the same origin' },
    { id: 149, testId: 8, difficulty: 'hard', question: "What is `git bisect` used for?", type: 'mcq', options: ['To split a commit into two', 'To perform a binary search on the commit history to find the specific commit that introduced a bug', 'To create a new branch', 'To merge two commits'], answer: 'To perform a binary search on the commit history to find the specific commit that introduced a bug' },
    { id: 150, testId: 8, difficulty: 'hard', question: "Which CSS function can be used for mathematical calculations within property values?", type: 'mcq', options: ['`math()`', '`expression()`', '`calc()`', '`compute()`'], answer: '`calc()`' },
    { id: 151, testId: 8, difficulty: 'expert', question: "What is a 'Merkle Tree'?", type: 'mcq', options: ['A data structure used in blockchain and Git for efficiently and securely verifying the contents of large data structures', 'A type of binary search tree', 'A CSS layout model', 'A network routing algorithm'], answer: 'A data structure used in blockchain and Git for efficiently and securely verifying the contents of large data structures' },
    { id: 152, testId: 8, difficulty: 'hard', question: "What is the purpose of the `srcset` attribute on an `<img>` tag?", type: 'mcq', options: ["To provide a single source for an image", "To provide a set of image sources for the browser to choose from based on screen density or viewport size", "To provide a fallback image", "To describe the image content"], answer: "To provide a set of image sources for the browser to choose from based on screen density or viewport size" },
    { id: 153, testId: 8, difficulty: 'hard', question: "What is the difference between `for...in` and `for...of` loops?", type: 'mcq', options: ['`for...in` iterates over property names (keys) of an object, `for...of` iterates over the values of an iterable', '`for...of` is faster', 'There is no difference', '`for...in` is for arrays, `for...of` is for objects'], answer: '`for...in` iterates over property names (keys) of an object, `for...of` iterates over the values of an iterable' },
    { id: 154, testId: 8, difficulty: 'expert', question: "What is the 'Composite' design pattern?", type: 'mcq', options: ['A pattern that allows you to compose objects into tree structures to represent part-whole hierarchies', 'A pattern for creating objects', 'A pattern for managing state', 'A pattern for asynchronous programming'], answer: 'A pattern that allows you to compose objects into tree structures to represent part-whole hierarchies' },
    { id: 155, testId: 8, difficulty: 'hard', question: "What does the CSS `all: unset` do?", type: 'mcq', options: ['Resets all properties to their initial values', 'Changes all of an element\'s properties to their inherited value if they inherit by default, or to their initial value if not', 'Makes all properties `inherit` from their parent', 'It is not a valid CSS property'], answer: 'Changes all of an element\'s properties to their inherited value if they inherit by default, or to their initial value if not' },
    { id: 156, testId: 8, difficulty: 'hard', question: "What is `React.StrictMode`?", type: 'mcq', options: ['A component for enforcing coding standards', 'A development mode tool for highlighting potential problems in an application', 'A production-only optimization', 'A way to enable strict type checking'], answer: 'A development mode tool for highlighting potential problems in an application', explanation: "It activates additional checks and warnings for its descendants." },
    { id: 157, testId: 8, difficulty: 'hard', question: "What is a `Data URI`?", type: 'mcq', options: ['A URI for a database', 'A URI scheme that provides a way to include data in-line in web pages as if they were external resources', 'A URL to a data-fetching API', 'A type of JSON object'], answer: 'A URI scheme that provides a way to include data in-line in web pages as if they were external resources' },
    { id: 158, testId: 8, difficulty: 'hard', question: "What is `SVG`?", type: 'mcq', options: ['A raster image format', 'A JavaScript library', 'An XML-based vector image format for two-dimensional graphics with support for interactivity and animation', 'A CSS framework'], answer: 'An XML-based vector image format for two-dimensional graphics with support for interactivity and animation' },
    { id: 159, testId: 8, difficulty: 'expert', question: "What is `CLS` (Cumulative Layout Shift)?", type: 'mcq', options: ['A measure of visual stability, quantifying how much unexpected layout shift users experience', 'A CSS property for shifting layouts', 'A JavaScript method for animations', 'A server logging system'], answer: 'A measure of visual stability, quantifying how much unexpected layout shift users experience', explanation: "It's a key Core Web Vital metric." },
    { id: 160, testId: 8, difficulty: 'hard', question: "What is `npm audit` used for?", type: 'mcq', options: ['To check for outdated packages', 'To scan your project for known security vulnerabilities in its dependencies', 'To measure package performance', 'To clean the npm cache'], answer: 'To scan your project for known security vulnerabilities in its dependencies' },
    { id: 161, testId: 8, difficulty: 'hard', question: "What is the `box-shadow` property in CSS?", type: 'mcq', options: ["It adds a shadow effect around an element's frame", "It defines the shape of the box", "It sets the background color of a box", "It is for 3D transformations"], answer: "It adds a shadow effect around an element's frame" },
    { id: 162, testId: 8, difficulty: 'expert', question: "What is a 'race condition'?", type: 'mcq', options: ['A performance bug in animations', 'A bug where the outcome of an operation depends on the unpredictable timing of uncontrollable events', 'A network connection error', 'A CSS specificity conflict'], answer: 'A bug where the outcome of an operation depends on the unpredictable timing of uncontrollable events' },
    { id: 163, testId: 8, difficulty: 'hard', question: "What is `git`?", type: 'mcq', options: ['A programming language', 'A web server', 'A distributed version control system', 'A database'], answer: 'A distributed version control system' },
    { id: 164, testId: 8, difficulty: 'hard', question: "What is `JSONP`?", type: 'mcq', options: ['A more secure version of JSON', 'A historical technique for making cross-domain requests that works by dynamically creating and injecting a `<script>` tag', 'A JSON preprocessor', 'A database format'], answer: 'A historical technique for making cross-domain requests that works by dynamically creating and injecting a `<script>` tag' },
    { id: 165, testId: 8, difficulty: 'hard', question: "Explain Content Security Policy (CSP).", type: 'subjective', answer: "CSP is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross-Site Scripting (XSS) and data injection. It's a set of HTTP headers that allows you to create a whitelist of sources of trusted content (scripts, styles, images, etc.) and will instruct the browser to only execute or render resources from those sources." },
    { id: 166, testId: 8, difficulty: 'hard', question: "What are some performance optimization strategies for a large-scale React application?", type: 'subjective', answer: "Key strategies include: 1. Code Splitting: Using `React.lazy` and Suspense to load components only when needed. 2. Memoization: Using `React.memo`, `useMemo`, and `useCallback` to prevent unnecessary re-renders. 3. Windowing: Using libraries like `react-window` to render only the visible portion of large lists. 4. Bundle Analysis: Using tools like `webpack-bundle-analyzer` to find and remove large dependencies." },
    { id: 167, testId: 8, difficulty: 'hard', question: "Describe how you would implement internationalization (i18n) in a React application.", type: 'subjective', answer: "I would use a library like `react-i18next` or `react-intl`. The process involves: 1. Storing translation strings in JSON files for each language (e.g., `en.json`, `es.json`). 2. Configuring an i18n instance to load these resources and detect the user's language. 3. Wrapping the app in a provider component. 4. Using a hook (e.g., `useTranslation`) within components to access the translation function (`t`) and the current language." },
    { id: 168, testId: 8, difficulty: 'hard', question: "What are generator functions in JavaScript?", type: 'subjective', answer: "Generators are functions that can be paused and resumed, allowing for more control over execution flow. They are defined with the `function*` syntax and use the `yield` keyword to pause and return a value. The `next()` method is called on the generator object to resume execution. They are fundamental to libraries like Redux Saga for managing complex asynchronous flows." },
    { id: 169, testId: 8, difficulty: 'hard', question: "What is CSS Containment?", type: 'subjective', answer: "The CSS `contain` property allows an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree. This is a performance optimization, allowing the browser to skip layout and paint calculations for content outside the contained element when its internal content changes. Common values are `layout`, `paint`, `size`, and `strict`." },
    { id: 170, testId: 8, difficulty: 'expert', question: "What is a JAMstack architecture?", type: 'subjective', answer: "JAMstack (JavaScript, APIs, Markup) is a modern web development architecture. It's based on client-side JavaScript, reusable APIs, and prebuilt Markup. Sites are pre-rendered into static files, served from a CDN for speed and security. Any dynamic functionality is handled by client-side JavaScript communicating with APIs." },
    { id: 171, testId: 8, difficulty: 'hard', question: "What is WebAssembly (Wasm)?", type: 'subjective', answer: "WebAssembly is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages like C++, C#, and Rust, enabling deployment on the web for client and server applications. It allows running code on the web at near-native speed, which is ideal for performance-critical tasks like gaming, video editing, or cryptography." },
    { id: 172, testId: 8, difficulty: 'expert', question: "How does HTTP/2 improve performance over HTTP/1.1?", type: 'subjective', answer: "HTTP/2 introduces several key improvements: 1. Multiplexing: Allows multiple requests and responses to be sent in parallel over a single TCP connection, eliminating head-of-line blocking at the HTTP level. 2. Header Compression (HPACK): Reduces the overhead of redundant HTTP headers. 3. Server Push: Allows the server to proactively send resources to the client that it knows the client will need." },
    { id: 173, testId: 8, difficulty: 'hard', question: "What is an `IntersectionObserver`?", type: 'subjective', answer: "The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with the top-level document's viewport. It is highly performant because it doesn't require polling, and is commonly used for lazy-loading images or components, and implementing infinite scrolling." },
    { id: 174, testId: 8, difficulty: 'hard', question: "What are CSS Houdini APIs?", type: 'subjective', answer: "CSS Houdini is a collection of low-level APIs that exposes parts of the CSS engine, giving developers direct access to the CSS Object Model. This allows developers to extend CSS by creating their own CSS features, such as custom properties, layouts (Layout API), and paint effects (Paint API), without waiting for browser vendors to implement them." },
    { id: 175, testId: 8, difficulty: 'hard', question: "What is the `Proxy` object in JavaScript?", type: 'subjective', answer: "A `Proxy` object is used to define custom behavior for fundamental operations (like property lookup, assignment, enumeration, function invocation). It wraps another object (the target) and allows you to intercept and redefine operations on the target. This enables powerful metaprogramming and is used by frameworks like Vue.js for reactivity." },
    { id: 176, testId: 8, difficulty: 'expert', question: "How do you prevent CSS style collisions in a large application?", type: 'subjective', answer: "Common strategies include: 1. CSS Modules: Scopes class names locally to the component by hashing them. 2. CSS-in-JS libraries (e.g., Styled Components, Emotion): Encapsulates styles within the component, generating unique class names. 3. BEM Naming Convention: A strict naming methodology to create unique, descriptive class names. 4. Utility-first CSS (e.g., Tailwind CSS): Composes interfaces from low-level utility classes, reducing the need for custom CSS." },
    { id: 177, testId: 8, difficulty: 'hard', question: "What is GraphQL Subscriptions?", type: 'subjective', answer: "GraphQL Subscriptions are a feature that allows a server to send data to its clients when a specific event happens. They are typically implemented with WebSockets, maintaining a persistent connection to the server. This enables real-time updates in applications, where the server can push data to the client without the client having to poll for it." },
    { id: 178, testId: 8, difficulty: 'expert', question: "What is a 'memory leak' in JavaScript and how might one occur?", type: 'subjective', answer: "A memory leak occurs when a piece of memory that is no longer needed is not released by the garbage collector, leading to a gradual decline in application performance. Common causes include: 1. Accidental global variables. 2. Un-removed event listeners. 3. Uncleared timers (`setInterval`). 4. Closures holding references to objects that are no longer in scope." },
    { id: 179, testId: 8, difficulty: 'expert', question: "What is a `SharedArrayBuffer` and what problem does it solve?", type: 'subjective', answer: "A `SharedArrayBuffer` is a fixed-length raw binary data buffer that can be used to create views on shared memory. Unlike a regular `ArrayBuffer`, it can be shared between the main thread and web workers, allowing for fast and efficient data sharing without the need for copying data via `postMessage`. It is often used with `Atomics` to manage concurrency." },
    { id: 180, testId: 8, difficulty: 'expert', question: "What is the 'actor model' of concurrency?", type: 'subjective', answer: "The actor model is a mathematical model of concurrent computation that treats 'actors' as the universal primitives of computation. An actor is a computational entity that, in response to a message it receives, can concurrently: send a finite number of messages to other actors; create a finite number of new actors; and designate the behavior to be used for the next message it receives. This model avoids shared state and relies on message passing, making it easier to reason about concurrency." },
    // Test 9: 45 Questions (27 MCQ, 18 Subjective)
    { id: 181, testId: 9, difficulty: 'expert', question: "What is `TC39`?", type: 'mcq', options: ['The technical committee that standardizes ECMAScript (JavaScript)', 'A JavaScript runtime engine', 'A web browser', 'A code formatting tool'], answer: 'The technical committee that standardizes ECMAScript (JavaScript)' },
    { id: 182, testId: 9, difficulty: 'expert', question: "Which of these is a primary goal of the 'islands architecture'?", type: 'mcq', options: ['To reduce the amount of JavaScript shipped to the client by default', 'To simplify server-side routing', 'To enforce a single frontend framework', 'To make all components stateful'], answer: 'To reduce the amount of JavaScript shipped to the client by default' },
    { id: 183, testId: 9, difficulty: 'hard', question: "What is a 'side effect' in the context of functional programming and React?", type: 'mcq', options: ['The return value of a function', 'Any interaction with the outside world from within a function, like fetching data or manipulating the DOM', 'A bug in the code', 'A performance optimization'], answer: 'Any interaction with the outside world from within a function, like fetching data or manipulating the DOM' },
    { id: 184, testId: 9, difficulty: 'hard', question: "In the context of browser performance, what is 'jank'?", type: 'mcq', options: ['Slow network requests', 'Stuttering or jerky animations and scrolling caused by long-running tasks on the main thread', 'A security vulnerability', 'Incorrectly rendered CSS'], answer: 'Stuttering or jerky animations and scrolling caused by long-running tasks on the main thread' },
    { id: 185, testId: 9, difficulty: 'expert', question: "What is `Object.is()` in JavaScript and how does it differ from `===`?", type: 'mcq', options: ['It is the same as `===`', 'It treats `+0` and `-0` as different, and `NaN` as equal to `NaN`', 'It performs type coercion', 'It is used for comparing object references only'], answer: 'It treats `+0` and `-0` as different, and `NaN` as equal to `NaN`' },
    { id: 186, testId: 9, difficulty: 'hard', question: "What is a `webpack plugin`?", type: 'mcq', options: ['It transforms the source code of a single file', 'It is a broader tool that can perform actions on bundles, like minification or environment variable injection', 'It is another name for a loader', 'It is a configuration file'], answer: 'It is a broader tool that can perform actions on bundles, like minification or environment variable injection' },
    { id: 187, testId: 9, difficulty: 'hard', question: "What is the `<dialog>` element in HTML?", type: 'mcq', options: ['A container for a conversation', 'A native HTML element for creating dialog boxes, modals, and other popups', 'A tag for defining a script', 'A deprecated tag for layout'], answer: 'A native HTML element for creating dialog boxes, modals, and other popups' },
    { id: 188, testId: 9, difficulty: 'hard', question: "Which is NOT a valid value for the CSS `position` property?", type: 'mcq', options: ['static', 'relative', 'absolute', 'centered'], answer: 'centered' },
    { id: 189, testId: 9, difficulty: 'hard', question: "What is 'memoization'?", type: 'mcq', options: ['A way to store data in memory', 'An optimization technique that caches the results of expensive function calls to avoid re-computation', 'A memory leak', 'A JavaScript data type'], answer: 'An optimization technique that caches the results of expensive function calls to avoid re-computation' },
    { id: 190, testId: 9, difficulty: 'hard', question: "Which hook should be used to perform side effects in a React functional component?", type: 'mcq', options: ['useState', 'useContext', 'useEffect', 'useReducer'], answer: 'useEffect' },
    { id: 191, testId: 9, difficulty: 'expert', question: "What is the `useDeferredValue` hook in React?", type: 'mcq', options: ['A hook to delay component rendering', 'A hook that lets you defer updating a non-critical part of the UI', 'A hook for fetching data', 'A hook for managing form state'], answer: 'A hook that lets you defer updating a non-critical part of the UI' },
    { id: 192, testId: 9, difficulty: 'expert', question: "What is an SRI (Subresource Integrity) attribute used for?", type: 'mcq', options: ['To ensure that fetched files (e.g., from a CDN) have not been manipulated by using a cryptographic hash', 'To improve SEO', 'To define the style of a resource', 'To manage caching'], answer: 'To ensure that fetched files (e.g., from a CDN) have not been manipulated by using a cryptographic hash' },
    { id: 193, testId: 9, difficulty: 'hard', question: "In CSS, what does the `:root` pseudo-class represent?", type: 'mcq', options: ['It selects the root element of a document, which is `<html>` in HTML', 'It selects all root-level directories', 'It selects the first element of the page', 'It is not a valid pseudo-class'], answer: 'It selects the root element of a document, which is `<html>` in HTML', explanation: "It's most commonly used for declaring global CSS variables." },
    { id: 194, testId: 9, difficulty: 'expert', question: "What is the 'Observer' design pattern?", type: 'mcq', options: ['A behavioral pattern that defines a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing', 'A pattern for creating objects', 'A pattern for structuring components', 'A pattern for database connections'], answer: 'A behavioral pattern that defines a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing' },
    { id: 195, testId: 9, difficulty: 'hard', question: "What is `localStorage`?", type: 'mcq', options: ['A way to store key-value pairs locally that persists even after the browser is closed', 'Temporary session storage', 'A server-side database', 'A cookie management API'], answer: 'A way to store key-value pairs locally that persists even after the browser is closed' },
    { id: 196, testId: 9, difficulty: 'expert', question: "What is the `useTransition` hook in React?", type: 'mcq', options: ["For creating CSS animations", "To let you update the state without blocking the UI, by marking some state updates as 'transitions'", "A hook for page routing", "A hook for managing component lifecycles"], answer: "To let you update the state without blocking the UI, by marking some state updates as 'transitions'" },
    { id: 197, testId: 9, difficulty: 'hard', question: "What is a 'polyfill'?", type: 'mcq', options: ["A tool for managing multiple Node.js versions", "Code that provides modern functionality on older browsers that don't support it", "A CSS framework", "A security patch"], answer: "Code that provides modern functionality on older browsers that don't support it" },
    { id: 198, testId: 9, difficulty: 'hard', question: "What does the `Array.prototype.splice` method do?", type: 'mcq', options: ["It returns a shallow copy of a portion of an array", "It changes the contents of an array by removing or replacing existing elements and/or adding new elements in place", "It merges two or more arrays", "It creates a new array with all sub-array elements concatenated into it"], answer: "It changes the contents of an array by removing or replacing existing elements and/or adding new elements in place" },
    { id: 199, testId: 9, difficulty: 'hard', question: "What is a 'pure' CSS selector?", type: 'mcq', options: ["A selector that uses only class names", "A selector that does not depend on any state (like :hover) or location in the DOM", "A selector that is very performant", "A selector that uses the '*' wildcard"], answer: "A selector that does not depend on any state (like :hover) or location in the DOM" },
    { id: 200, testId: 9, difficulty: 'hard', question: "In TypeScript, what is an 'interface'?", type: 'mcq', options: ["A class that cannot be instantiated", "A way of defining an object's shape, or a contract for a class to implement", "A type of variable", "A loop construct"], answer: "A way of defining an object's shape, or a contract for a class to implement" },
    { id: 201, testId: 9, difficulty: 'expert', question: "What is the CSS `contain` property used for?", type: 'mcq', options: ["To contain floats", "To indicate that an element's subtree is independent, for performance optimization", "To set the dimensions of a container", "To align items inside a container"], answer: "To indicate that an element's subtree is independent, for performance optimization" },
    { id: 202, testId: 9, difficulty: 'hard', question: "What is the `Same-Origin Policy` (SOP)?", type: 'mcq', options: ["A policy that all web resources must come from the same server", "A critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin", "A styling guideline", "A performance optimization"], answer: "A critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin" },
    { id: 203, testId: 9, difficulty: 'hard', question: "What is `tree-shaking` in the context of a JavaScript bundler?", type: 'mcq', options: ["A debugging method", "A process of dead code elimination, where unused exports are excluded from the final bundle", "A visualization of the dependency tree", "A way to randomly reorder code"], answer: "A process of dead code elimination, where unused exports are excluded from the final bundle" },
    { id: 204, testId: 9, difficulty: 'hard', question: "What is the purpose of `git cherry-pick`?", type: 'mcq', options: ["To select a random commit", "To apply a specific commit from one branch onto another branch", "To undo a commit", "To view the details of a commit"], answer: "To apply a specific commit from one branch onto another branch" },
    { id: 205, testId: 9, difficulty: 'expert', question: "What is a 'Bloom filter'?", type: 'mcq', options: ["A CSS image filter", "A probabilistic data structure used to test whether an element is a member of a set", "A security firewall", "A UI component for filtering data"], answer: "A probabilistic data structure used to test whether an element is a member of a set" },
    { id: 206, testId: 9, difficulty: 'hard', question: "What are `HSTS` headers (HTTP Strict Transport Security)?", type: 'mcq', options: ["Headers to enable caching", "Headers to control CORS", "A web security policy mechanism that tells browsers to only interact with a website using HTTPS connections", "Headers for compressing content"], answer: "A web security policy mechanism that tells browsers to only interact with a website using HTTPS connections" },
    { id: 207, testId: 9, difficulty: 'hard', question: "What is the difference between `Promise.all()` and `Promise.allSettled()`?", type: 'mcq', options: ["There is no difference", "`Promise.allSettled()` waits for all promises to settle (either fulfilled or rejected), while `Promise.all()` rejects as soon as one promise rejects", "`Promise.all()` is faster", "`Promise.allSettled()` is deprecated"], answer: "`Promise.allSettled()` waits for all promises to settle (either fulfilled or rejected), while `Promise.all()` rejects as soon as one promise rejects" },
    { id: 208, testId: 9, difficulty: 'expert', question: "How would you optimize a large, complex SVG for the web?", type: 'subjective', answer: "Optimization involves several steps: 1. **Simplify Paths**: Use vector editing tools to reduce the number of nodes and complexity of paths. 2. **Use SVGO**: Run the SVG through a tool like SVGO (SVG Optimizer) to remove redundant information, editor metadata, and comments. 3. **Use `<defs>` and `<use>`**: For repeated shapes or icons, define them once in a `<defs>` block and reuse them with the `<use>` element. 4. **Convert Text to Paths**: This ensures fonts render correctly but increases file size, so it's a trade-off. 5. **Minimize `style` attributes**: Use CSS classes instead of inline styles." },
    { id: 209, testId: 9, difficulty: 'expert', question: "What is the 'paint holding' browser optimization?", type: 'subjective', answer: "Paint holding is a performance feature in some browsers (like Chrome) where the browser will 'hold' the previously rendered content on screen during a cross-origin navigation. This avoids a 'white flash' and improves the perceived performance of the navigation, making it feel smoother and faster for the user." },
    { id: 210, testId: 9, difficulty: 'expert', question: "What is the `Intl` object in JavaScript and what can it be used for?", type: 'subjective', answer: "The `Intl` object is the namespace for the ECMAScript Internationalization API. It provides language-sensitive functionality, including: 1. `Intl.DateTimeFormat`: For formatting dates and times. 2. `Intl.NumberFormat`: For formatting numbers, currencies, and units. 3. `Intl.Collator`: For string comparison. 4. `Intl.PluralRules`: For handling language-specific pluralization." },
    { id: 211, testId: 9, difficulty: 'expert', question: "Describe how you would approach debugging a memory leak in a single-page application.", type: 'subjective', answer: "I would use the browser's DevTools, specifically the Memory and Performance tabs. The process would be: 1. Record a heap snapshot. 2. Perform an action that I suspect is causing a leak. 3. Record a second heap snapshot. 4. Compare the two snapshots, filtering for 'Objects allocated between snapshot 1 and 2'. 5. I would look for 'detached DOM nodes' which are DOM elements that are no longer in the DOM but are still held in memory, often by lingering event listeners or closures." },
    { id: 212, testId: 9, difficulty: 'expert', question: "What are CSS Houdini APIs and give an example of one.", type: 'subjective', answer: "CSS Houdini is a set of low-level APIs that exposes parts of the CSS engine, giving developers the power to extend CSS. An example is the **Paint API**, which allows you to programmatically generate an image wherever a CSS property expects an image. You can define a 'paint worklet' in JavaScript to draw, for example, a custom background pattern or border effect." },
    { id: 213, testId: 9, difficulty: 'expert', question: "What is a `FinalizationRegistry` in JavaScript?", type: 'subjective', answer: "A `FinalizationRegistry` is an object that lets you request a callback to be invoked when an object is garbage-collected. This is an advanced feature used for managing external resources tied to a JavaScript object, such as cleaning up a file handle or a database connection held by a wrapper object when that object is no longer reachable." },
    { id: 214, testId: 9, difficulty: 'expert', question: "What is 'Concurrent Mode' in React?", type: 'subjective', answer: "Concurrent Mode (now largely referred to as concurrent features) is a set of features that helps React apps stay responsive by making rendering interruptible. Instead of a single, long-running render task, React can break up the work into pieces, pausing and resuming as needed to respond to user input. This is enabled through features like `useTransition` and `useDeferredValue`." },
    { id: 215, testId: 9, difficulty: 'expert', question: "What is a 'Layout Thrashing' and how can you avoid it?", type: 'subjective', answer: "Layout thrashing occurs when JavaScript code repeatedly and synchronously reads from and then writes to the DOM. Each time you read a layout property (like `offsetHeight`), the browser may need to perform a fresh layout calculation to give you the correct value. If you do this in a loop after making changes, you force repeated, unnecessary recalculations. To avoid it, you should batch all your reads first, and then batch all your writes." },
    { id: 216, testId: 9, difficulty: 'expert', question: "Explain what a 'B-Tree' is and why it's useful for databases.", type: 'subjective', answer: "A B-Tree is a self-balancing tree data structure that keeps data sorted and allows for searches, sequential access, insertions, and deletions in logarithmic time. They are particularly useful for databases and filesystems because they are optimized for systems that read and write large blocks of data. They minimize disk I/O by having a high branching factor, which means the tree is wide and shallow." },
    { id: 217, testId: 9, difficulty: 'expert', question: "What is 'isomorphic' or 'universal' JavaScript?", type: 'subjective', answer: "Isomorphic JavaScript (or Universal JavaScript) refers to code that can run on both the server and the client. Frameworks like Next.js enable this, allowing for server-side rendering of a React application, which then 'hydrates' on the client to become a fully interactive single-page application. This shares code and logic between both environments." },
    { id: 218, testId: 9, difficulty: 'expert', question: "What is a 'render prop' in React?", type: 'subjective', answer: "A render prop is a technique for sharing code between React components using a prop whose value is a function. A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic. This allows the parent component to control what is rendered inside the child, enabling flexible and reusable logic." },
    { id: 219, testId: 9, difficulty: 'expert', question: "What is the difference between imperative and declarative programming, and which paradigm does React follow?", type: 'subjective', answer: "Imperative programming focuses on *how* to achieve a result by specifying a sequence of explicit commands. Declarative programming focuses on *what* the result should be, without specifying how to achieve it. React follows a declarative paradigm; you declare what the UI should look like for a given state, and React handles the imperative DOM mutations to get there." },
    { id: 220, testId: 9, difficulty: 'expert', question: "What is 'Incremental Static Regeneration' (ISR) in Next.js?", type: 'subjective', answer: "ISR is a feature in Next.js that allows you to update static content after the site has already been built. You can specify a `revalidate` time for a static page. When a request comes in after that time has passed, the page is served from the cache (stale), and Next.js triggers a regeneration of the page in the background. Once successfully regenerated, the cache is updated for subsequent requests." },
    { id: 221, testId: 9, difficulty: 'expert', question: "What is the `Temporal Dead Zone` (TDZ) in JavaScript?", type: 'subjective', answer: "The Temporal Dead Zone is the period between entering a scope and the point where a `let` or `const` variable is declared. During this time, the variable is in the scope but has not yet been initialized. Accessing the variable within the TDZ will result in a `ReferenceError`. This prevents using variables before they are declared." },
    { id: 222, testId: 9, difficulty: 'expert', question: "What is the purpose of the `useSyncExternalStore` hook in React 18?", type: 'subjective', answer: "`useSyncExternalStore` is a hook designed for external state management libraries (like Redux or Zustand) to integrate with React's concurrent rendering features. It allows React to safely and efficiently read from an external data source, ensuring that concurrent reads are consistent and that updates to the store trigger re-renders." },
    { id: 223, testId: 9, difficulty: 'expert', question: "What is a 'side-channel attack'?", type: 'subjective', answer: "A side-channel attack is an attack based on information gained from the physical implementation of a computer system, rather than weaknesses in the algorithm itself. Examples include monitoring power consumption, electromagnetic leaks, or timing information to deduce cryptographic keys or other secret information. The Spectre vulnerability is a form of timing-based side-channel attack." },
    { id: 224, testId: 9, difficulty: 'expert', question: "What is 'event sourcing'?", type: 'subjective', answer: "Event sourcing is an architectural pattern where all changes to application state are stored as a sequence of events. Instead of storing the current state of a data entity, you store the sequence of events that led to that state. The current state can be reconstructed by replaying the events. This provides a full audit log and can simplify debugging and reasoning about state changes." },
    { id: 225, testId: 9, difficulty: 'expert', question: "What is a 'Finite State Machine' (FSM)?", type: 'subjective', answer: "A Finite State Machine is a mathematical model of computation that can be in exactly one of a finite number of 'states' at any given time. An FSM can change from one state to another in response to some external inputs (called 'transitions'). They are useful for modeling and managing complex UI states, ensuring that only valid state transitions can occur." },
    // Test 10: 50 Questions (30 MCQ, 20 Subjective)
    { id: 226, testId: 10, difficulty: 'expert', question: "What is the primary purpose of the `useId` hook in React 18?", type: 'mcq', options: ["To generate a unique ID for a component instance", "To generate stable, unique IDs that can be used for client and server rendering", "To track user sessions", "To create a key for list items"], answer: "To generate stable, unique IDs that can be used for client and server rendering", explanation: "It solves issues with hydration mismatches for generated IDs when using SSR." },
    { id: 227, testId: 10, difficulty: 'expert', question: "What is a 'Canary Deployment'?", type: 'mcq', options: ["A deployment to a test environment", "Gradually rolling out a new version to a small subset of users before rolling it out to the entire user base", "Deploying a new version to all users at once", "A deployment that is expected to fail"], answer: "Gradually rolling out a new version to a small subset of users before rolling it out to the entire user base" },
    { id: 228, testId: 10, difficulty: 'expert', question: "What is the CSS `content-visibility` property used for?", type: 'mcq', options: ["To hide content from screen readers", "To control whether an element renders its contents at all, allowing for performance optimization", "To set the visibility of an element's pseudo-content", "An alias for the `display` property"], answer: "To control whether an element renders its contents at all, allowing for performance optimization" },
    { id: 229, testId: 10, difficulty: 'expert', question: "In TypeScript, what is a 'discriminated union'?", type: 'mcq', options: ["A type that can be one of several different types", "A type that has a common, literal property that can be used for type narrowing", "A union of only number and string types", "A type that is not allowed"], answer: "A type that has a common, literal property that can be used for type narrowing" },
    { id: 230, testId: 10, difficulty: 'expert', question: "What is a 'WebAssembly System Interface' (WASI)?", type: 'mcq', options: ["An API for interacting with the DOM from WebAssembly", "A standardized interface for WebAssembly modules to interact with the underlying operating system", "A graphical user interface for Wasm", "A debugging tool for WebAssembly"], answer: "A standardized interface for WebAssembly modules to interact with the underlying operating system" },
    { id: 231, testId: 10, difficulty: 'expert', question: "What does the `passive: true` option on an event listener do?", type: 'mcq', options: ["It makes the listener fire only once", "It tells the browser that the listener will not call `preventDefault()`, allowing for scrolling performance optimizations", "It makes the listener asynchronous", "It reduces the priority of the listener"], answer: "It tells the browser that the listener will not call `preventDefault()`, allowing for scrolling performance optimizations" },
    { id: 232, testId: 10, difficulty: 'expert', question: "What is 'Streaming SSR' in the context of modern web frameworks?", type: 'mcq', options: ["Streaming video from a server", "Sending down the server-rendered HTML in chunks as it's generated, allowing the browser to start parsing earlier", "A way to stream state updates", "A protocol for real-time communication"], answer: "Sending down the server-rendered HTML in chunks as it's generated, allowing the browser to start parsing earlier" },
    { id: 233, testId: 10, difficulty: 'expert', question: "What is a 'Priority Queue' data structure?", type: 'mcq', options: ["A queue where every element has a priority, and higher priority elements are served first", "A queue that is always sorted", "A queue that can only hold a certain number of items", "A standard FIFO queue"], answer: "A queue where every element has a priority, and higher priority elements are served first" },
    { id: 234, testId: 10, difficulty: 'expert', question: "What is the purpose of the `Atomics` object in JavaScript?", type: 'mcq', options: ["To perform atomic operations on `SharedArrayBuffer` objects for concurrency control", "To create atomic CSS classes", "To handle atomic transactions in IndexedDB", "To ensure functions are pure"], answer: "To perform atomic operations on `SharedArrayBuffer` objects for concurrency control" },
    { id: 235, testId: 10, difficulty: 'expert', question: "What is a 'Trie' (Prefix Tree) data structure good for?", type: 'mcq', options: ["Sorting numbers efficiently", "Storing data in a balanced tree", "Efficiently storing and searching for strings, especially for autocomplete features", "Performing graph traversals"], answer: "Efficiently storing and searching for strings, especially for autocomplete features" },
    { id: 236, testId: 10, difficulty: 'expert', question: "What is 'tail-call optimization'?", type: 'mcq', options: ["A compiler optimization that avoids allocating a new stack frame for a function call if the call is the last action in the function", "An optimization for CSS tailwind", "A way to make the 'tail' of a queue faster", "A database query optimization"], answer: "A compiler optimization that avoids allocating a new stack frame for a function call if the call is the last action in the function" },
    { id: 237, testId: 10, difficulty: 'expert', question: "What is the 'Facade' design pattern?", type: 'mcq', options: ["A pattern that provides a simplified, higher-level interface to a larger body of code", "A pattern for creating beautiful user interfaces", "A pattern for database access", "A pattern for securing APIs"], answer: "A pattern that provides a simplified, higher-level interface to a larger body of code" },
    { id: 238, testId: 10, difficulty: 'expert', question: "What problem does `Promise.any()` solve?", type: 'mcq', options: ["It rejects as soon as one promise rejects", "It returns a single promise that fulfills as soon as one of the promises in the iterable fulfills", "It waits for all promises to fulfill", "It returns a random promise"], answer: "It returns a single promise that fulfills as soon as one of the promises in the iterable fulfills" },
    { id: 239, testId: 10, difficulty: 'expert', question: "What is the CSS `clamp()` function?", type: 'mcq', options: ["A function to set a minimum value for a property", "A function that clamps a value between an upper and lower bound", "A function to set a maximum value", "A function for clipping text"], answer: "A function that clamps a value between an upper and lower bound", explanation: "e.g., `width: clamp(200px, 50vw, 800px)`" },
    { id: 240, testId: 10, difficulty: 'expert', question: "What is an `OffscreenCanvas`?", type: 'mcq', options: ["A canvas that is not visible on screen", "A canvas that can be rendered to off the main thread, often in a Web Worker", "A deprecated canvas API", "A library for drawing"], answer: "A canvas that can be rendered to off the main thread, often in a Web Worker" },
    { id: 241, testId: 10, difficulty: 'expert', question: "What is the 'Command Query Responsibility Segregation' (CQRS) pattern?", type: 'mcq', options: ["A pattern that separates read and update operations for a data store", "A way to query a database", "A security pattern", "A UI design pattern"], answer: "A pattern that separates read and update operations for a data store" },
    { id: 242, testId: 10, difficulty: 'expert', question: "What is 'Big O notation'?", type: 'mcq', options: ["A way to describe the performance or complexity of an algorithm as the input size grows", "A mathematical notation for large numbers", "A way to write comments in code", "A versioning system"], answer: "A way to describe the performance or complexity of an algorithm as the input size grows" },
    { id: 243, testId: 10, difficulty: 'expert', question: "What is `optional chaining` (`?.`) in JavaScript?", type: 'mcq', options: ["A way to make function arguments optional", "A way to safely access nested object properties without having to check for the existence of each level", "A way to chain multiple promises", "A way to create optional CSS properties"], answer: "A way to safely access nested object properties without having to check for the existence of each level" },
    { id: 244, testId: 10, difficulty: 'expert', question: "What is the 'nullish coalescing operator' (`??`) in JavaScript?", type: 'mcq', options: ["A logical operator that returns its right-hand side operand when its left-hand side operand is `null` or `undefined`", "An operator for checking if a value is null", "An alias for the logical OR (`||`) operator", "An operator for concatenating strings"], answer: "A logical operator that returns its right-hand side operand when its left-hand side operand is `null` or `undefined`" },
    { id: 245, testId: 10, difficulty: 'expert', question: "What is the CSS `:where()` pseudo-class function?", type: 'mcq', options: ["A function to find elements in the DOM", "A function that takes a selector list as its argument, and the entire selector has zero specificity", "A function to apply styles based on location", "A function to query the browser for supported features"], answer: "A function that takes a selector list as its argument, and the entire selector has zero specificity" },
    { id: 246, testId: 10, difficulty: 'expert', question: "What is `SSG` (Static Site Generation)?", type: 'mcq', options: ["Generating pages on the server at request time", "Generating all pages as static HTML files at build time", "Rendering pages on the client side", "A way to style web pages"], answer: "Generating all pages as static HTML files at build time" },
    { id: 247, testId: 10, difficulty: 'expert', question: "What is the CSS `aspect-ratio` property?", type: 'mcq', options: ["A media query", "A property that sets a preferred aspect ratio for a box, which will be respected in layout calculations", "A filter for images", "A property for fonts"], answer: "A property that sets a preferred aspect ratio for a box, which will be respected in layout calculations" },
    { id: 248, testId: 10, difficulty: 'expert', question: "In TypeScript, what does the `satisfies` operator do?", type: 'mcq', options: ["It checks if a type satisfies a condition", "It ensures an expression matches some type, without changing the type of that expression", "It is an alias for a type cast", "It creates a new type"], answer: "It ensures an expression matches some type, without changing the type of that expression" },
    { id: 249, testId: 10, difficulty: 'expert', question: "What is 'QUIC'?", type: 'mcq', options: ["A fast programming language", "A transport layer network protocol built on top of UDP that is the foundation of HTTP/3", "A JavaScript framework", "A database"], answer: "A transport layer network protocol built on top of UDP that is the foundation of HTTP/3" },
    { id: 250, testId: 10, difficulty: 'expert', question: "What is `z-index`?", type: 'mcq', options: ["A CSS property that sets the z-order of a positioned element and its descendants", "A JavaScript variable", "A database index", "A file format"], answer: "A CSS property that sets the z-order of a positioned element and its descendants" },
    { id: 251, testId: 10, difficulty: 'expert', question: "What is `structuredClone()` in JavaScript?", type: 'mcq', options: ["A function to clone DOM nodes", "A global function that creates a deep copy of a given value, including complex types", "A way to copy only the structure of an object", "A method for cloning arrays"], answer: "A global function that creates a deep copy of a given value, including complex types" },
    { id: 252, testId: 10, difficulty: 'expert', question: "What is 'Partial Hydration'?", type: 'mcq', options: ["Hydrating only part of a component", "A technique where a server-rendered application is broken into smaller, independent parts that can be hydrated separately", "A bug during hydration", "A method for fetching partial data"], answer: "A technique where a server-rendered application is broken into smaller, independent parts that can be hydrated separately" },
    { id: 253, testId: 10, difficulty: 'expert', question: "What is 'Declarative Shadow DOM'?", type: 'mcq', options: ["A JavaScript library for DOM manipulation", "A way to define a Shadow DOM subtree directly in HTML for server-side rendering", "A new type of DOM event", "A CSS specification for shadows"], answer: "A way to define a Shadow DOM subtree directly in HTML for server-side rendering" },
    { id: 254, testId: 10, difficulty: 'expert', question: "What is a 'CRDT' (Conflict-Free Replicated Data Type)?", type: 'mcq', options: ["A data type that cannot have conflicts", "A data structure that can be replicated and updated independently across a network, with a guaranteed method to resolve inconsistencies", "A type of database", "A version control system"], answer: "A data structure that can be replicated and updated independently across a network, with a guaranteed method to resolve inconsistencies" },
    { id: 255, testId: 10, difficulty: 'expert', question: "What is `HTTP/3`?", type: 'mcq', options: ["The third version of HTTP, which uses QUIC over UDP", "An experimental version of HTTP", "An alias for HTTPS", "A slower but more reliable version of HTTP/2"], answer: "The third version of HTTP, which uses QUIC over UDP" },
    { id: 256, testId: 10, difficulty: 'expert', question: "What is 'combinatorial explosion'?", type: 'subjective', answer: "Combinatorial explosion refers to the rapid growth of the complexity of a problem due to how the number of combinations of possibilities increases as the input size grows. In frontend development, this can happen with component props, where adding a few boolean props can lead to dozens of possible states that need to be tested and maintained." },
    { id: 257, testId: 10, difficulty: 'expert', question: "What is 'isomorphic' or 'universal' JavaScript?", type: 'subjective', answer: "Isomorphic JavaScript (or Universal JavaScript) refers to code that can run on both the server and the client. Frameworks like Next.js enable this, allowing for server-side rendering of a React application, which then 'hydrates' on the client to become a fully interactive single-page application. This shares code and logic between both environments." },
    { id: 258, testId: 10, difficulty: 'expert', question: "What is a 'Speculative Execution' vulnerability like Spectre?", type: 'subjective', answer: "Spectre is a hardware vulnerability that affects modern microprocessors that perform speculative execution. It allows a malicious process to read data from the memory of other processes by exploiting the side effects of speculative execution, which is an optimization where the CPU performs tasks before it is certain they are needed. This breaks process isolation." },
    { id: 259, testId: 10, difficulty: 'expert', question: "What are 'CSS Container Queries'?", type: 'subjective', answer: "CSS Container Queries allow an element to change its styles based on the size of its parent container, rather than the size of the viewport (which is what media queries do). This enables the creation of truly modular and reusable components that can adapt to any layout they are placed in, without being dependent on the overall page structure." },
    { id: 260, testId: 10, difficulty: 'expert', question: "What is a 'vector clock' and what problem does it solve in distributed systems?", type: 'subjective', answer: "A vector clock is a data structure used for determining the partial ordering of events in a distributed system. It solves the problem of not having a single, global clock. Each process in the system maintains a vector of logical clocks, one for each process. This allows the system to determine if one event 'happened before' another, or if they are causally independent (concurrent)." },
    { id: 261, testId: 10, difficulty: 'expert', question: "Explain what 'idempotency' is and why it's important for APIs.", type: 'subjective', answer: "An operation is idempotent if it can be applied multiple times without changing the result beyond the initial application. In APIs, this is crucial for reliability. For example, a `DELETE` request should be idempotent; calling it multiple times should have the same effect as calling it once (the resource is deleted). This allows clients to safely retry requests in the face of network failures without causing unintended side effects." },
    { id: 262, testId: 10, difficulty: 'expert', question: "What is a 'Serverless Function' (e.g., AWS Lambda, Google Cloud Functions)?", type: 'subjective', answer: "A serverless function is a piece of code that runs in response to an event, without the developer having to manage the underlying server infrastructure. The cloud provider automatically provisions, scales, and manages the servers to run the code. This is a form of Function-as-a-Service (FaaS) and is used for building scalable, event-driven applications." },
    { id: 263, testId: 10, difficulty: 'expert', question: "What is the 'C10k problem'?", type: 'subjective', answer: "The C10k problem is the challenge of handling ten thousand concurrent connections on a single server. Solving it requires moving away from traditional models where each connection gets its own thread, and instead using architectures based on event-driven, asynchronous I/O, like those used by Nginx and Node.js, to handle many connections with a small number of threads." },
    { id: 264, testId: 10, difficulty: 'expert', question: "What is the 'actor model' of concurrency?", type: 'subjective', answer: "The actor model is a mathematical model of concurrent computation that treats 'actors' as the universal primitives of computation. An actor is a computational entity that, in response to a message it receives, can concurrently: send a finite number of messages to other actors; create a finite number of new actors; and designate the behavior to be used for the next message it receives. This model avoids shared state and relies on message passing, making it easier to reason about concurrency." },
    { id: 265, testId: 10, difficulty: 'expert', question: "What is gRPC and how does it compare to REST?", type: 'subjective', answer: "gRPC is a high-performance, open-source universal RPC framework developed by Google. It uses HTTP/2 for transport and Protocol Buffers as the interface description language. Compared to REST, gRPC is generally more performant, supports streaming, and has strongly typed contracts, but is less human-readable and has less browser support without a proxy like gRPC-Web." },
    { id: 266, testId: 10, difficulty: 'expert', question: "What is Semantic Versioning (SemVer)?", type: 'subjective', answer: "SemVer is a widely adopted versioning scheme. A version number is given in the format MAJOR.MINOR.PATCH. You increment the: 1. MAJOR version when you make incompatible API changes, 2. MINOR version when you add functionality in a backward-compatible manner, and 3. PATCH version when you make backward-compatible bug fixes." },
    { id: 267, testId: 10, difficulty: 'expert', question: "What is a 'race condition' and how would you prevent one?", type: 'subjective', answer: "A race condition is a bug where the outcome of an operation depends on the unpredictable timing of uncontrollable events. For example, if two async functions try to update the same value. You can prevent them using mechanisms like mutexes, semaphores, or locks to ensure only one process can access the shared resource at a time. In JavaScript, you can manage async flows with `async/await` or promise chains to create a predictable order of execution." },
    { id: 268, testId: 10, difficulty: 'expert', question: "What is a 'CAP theorem' in distributed systems?", type: 'subjective', answer: "The CAP theorem states that it is impossible for a distributed data store to simultaneously provide more than two out of the following three guarantees: Consistency (every read receives the most recent write or an error), Availability (every request receives a non-error response, without guarantee that it contains the most recent write), and Partition Tolerance (the system continues to operate despite an arbitrary number of messages being dropped by the network between nodes)." },
    { id: 269, testId: 10, difficulty: 'expert', question: "What is the difference between a process and a thread?", type: 'subjective', answer: "A process is an instance of a computer program that is being executed. It has its own memory space. A thread is the smallest unit of execution within a process. Multiple threads can exist within a single process and share that process's memory space. This makes communication between threads faster but also introduces risks like race conditions." },
    { id: 270, testId: 10, difficulty: 'expert', question: "What are 'monorepos' and what are their pros and cons?", type: 'subjective', answer: "A monorepo is a single version control repository that contains the code for many different projects. Pros include simplified dependency management, easier code sharing and refactoring across projects, and a single source of truth. Cons include potential for slower build and test times, the need for more sophisticated tooling (like Lerna or Nx), and a steeper learning curve for new developers." },
    { id: 271, testId: 10, difficulty: 'expert', question: "What is 'Infrastructure as Code' (IaC)?", type: 'subjective', answer: "IaC is the practice of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. Tools like Terraform, CloudFormation, or Ansible are used to define infrastructure in code, which makes it versionable, repeatable, and automated." },
    { id: 272, testId: 10, difficulty: 'expert', question: "What is a 'Deadlock'?", type: 'subjective', answer: "A deadlock is a state in a system where two or more competing actions are each waiting for the other to finish, and thus neither ever does. For example, Process A holds Resource 1 and needs Resource 2, while Process B holds Resource 2 and needs Resource 1. Both processes are blocked indefinitely." },
    { id: 273, testId: 10, difficulty: 'expert', question: "What is 'functional programming'?", type: 'subjective', answer: "Functional programming is a programming paradigm where programs are constructed by applying and composing functions. It treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. Key concepts include pure functions, immutability, first-class functions, and higher-order functions." },
    { id: 274, testId: 10, difficulty: 'expert', question: "What is the 'SOLID' principle in software design?", type: 'subjective', answer: "SOLID is an acronym for five design principles intended to make software designs more understandable, flexible, and maintainable. They are: Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation Principle, and Dependency Inversion Principle." },
    { id: 275, testId: 10, difficulty: 'expert', question: "What is a 'container' (like Docker)?", type: 'subjective', answer: "A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings." }
  ],
  backend: [],
  'full-stack': [],
  'next-js': [],
  java: [],
  python: [],
  mern: [],
  'c-plus-plus': [],
  devops: [],
  'data-science': [],
  'ai-ml': [],
  'cloud-computing': [],
  'mobile-development': [],
  cybersecurity: [],
};

const allCategories = [
  'backend', 'full-stack', 'next-js', 'java', 'python', 'mern', 'c-plus-plus',
  'devops', 'data-science', 'ai-ml', 'cloud-computing', 'mobile-development', 'cybersecurity'
];

const testQuestionCounts = [
    { testId: 1, count: 5 },
    { testId: 2, count: 10 },
    { testId: 3, count: 15 },
    { testId: 4, count: 20 },
    { testId: 5, count: 25 },
    { testId: 6, count: 30 },
    { testId: 7, count: 35 },
    { testId: 8, count: 40 },
    { testId: 9, count: 45 },
    { testId: 10, count: 50 },
];

const difficultyLevels: Array<'easy' | 'medium' | 'hard' | 'expert'> = ['easy', 'easy', 'medium', 'medium', 'medium', 'hard', 'hard', 'hard', 'expert', 'expert'];

let questionIdCounter = 276; 

allCategories.forEach(category => {
    testQuestionCounts.forEach(({ testId, count }) => {
        const mcqCount = Math.round(count * 0.6);
        const subjectiveCount = count - mcqCount;
        const difficulty = difficultyLevels[testId - 1];

        for (let i = 0; i < mcqCount; i++) {
            questions[category].push({
                id: questionIdCounter++,
                testId: testId,
                difficulty: difficulty,
                question: `This is a placeholder MCQ for ${category} Test ${testId}. Question ${i + 1}.`,
                type: 'mcq',
                options: [`${category} Option A`, `${category} Option B`, `${category} Option C`, `Correct ${category} Answer`],
                answer: `Correct ${category} Answer`,
                explanation: `This is a placeholder explanation for a ${category} question.`
            });
        }

        for (let i = 0; i < subjectiveCount; i++) {
            questions[category].push({
                id: questionIdCounter++,
                testId: testId,
                difficulty: difficulty,
                question: `This is a placeholder Subjective question for ${category} Test ${testId}. Question ${i + 1}.`,
                type: 'subjective',
                answer: `This is a placeholder answer for a ${category} subjective question.`,
                explanation: `This is a placeholder explanation for a ${category} question.`
            });
        }
    });
});
